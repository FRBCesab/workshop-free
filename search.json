{
  "articles": [
    {
      "path": "courses.html",
      "title": "Courses",
      "author": [],
      "contents": "\r\n\r\nComing soon…\r\nCorrections\r\nIf you see mistakes or want to suggest changes, please Create an issue on the source repository.\r\nReuse\r\nThe material of this website is licensed under Creative Commons Attribution CC BY 4.0. Source code is available at https://github.com/frbcesab/workshop-free/.\r\nCitation\r\nCasajus N, Grénié M, Magneville C & Villéger S (2022) Workshop FRB-CESAB & FREE Working Group: Functional Rarity and Diversity in Ecology.\r\n\r\n\r\n\r\n",
      "last_modified": "2022-06-08T17:54:32+02:00"
    },
    {
      "path": "index.html",
      "title": "Functional Rarity and Diversity in Ecology",
      "description": "FRB-CESAB & FREE Working Group Workshop",
      "author": [
        {
          "name": "Nicolas Casajus",
          "url": "https://nicolascasajus.fr"
        },
        {
          "name": "Matthias Grénié",
          "url": "https://rekyt.github.io/"
        },
        {
          "name": "Camille Magneville",
          "url": "https://umr-marbec.fr/membre/camille-magneville/"
        },
        {
          "name": "Sébastien Villéger",
          "url": "https://umr-marbec.fr/membre/sebastien-villeger/"
        }
      ],
      "date": "`r format(Sys.Date(), '%m-%d-%Y')`",
      "contents": "\r\n\r\n\r\nThe objective of this workshop, co-organized by the FRB-CESAB and the working group FREE is to give a general introduction to functional ecology. During the practice session, participants will learn to calculate various functional rarity and diversity index and to map them\r\n\r\nProgram\r\n08:30 – 09:00\r\n       Welcome coffee and icebreaker\r\n09:00 – 12:30\r\n       Introduction to functional ecology (~ 30 min)        Type of traits, distance metrics, functional space, etc. (~ 30 min)        Practice using the R packages mFD, funrar, and funbiogeo (~ 2h30)\r\n12:30 – 14:00\r\n       Lunch break\r\n14:00 – 18:00\r\n       Conference - More info here\r\n\r\nPrerequisites\r\nPlease follow this tutorial to correctly install your working environment (R, RStudio, git, etc.).\r\nCorrections\r\nIf you see mistakes or want to suggest changes, please Create an issue on the source repository.\r\nReuse\r\nThe material of this website is licensed under Creative Commons Attribution CC BY 4.0. Source code is available at https://github.com/frbcesab/workshop-free/.\r\nCitation\r\nCasajus N, Grénié M, Magneville C & Villéger S (2022) Workshop FRB-CESAB & FREE Working Group: Functional Rarity and Diversity in Ecology.\r\n\r\n\r\n\r\n",
      "last_modified": "2022-06-08T17:54:34+02:00"
    },
    {
      "path": "instructions.html",
      "title": "Installation of R, RStudio and git",
      "author": [],
      "contents": "\r\n\r\nContents\r\nInstallation\r\n  Windows\r\n  macOS\r\n Ubuntu\r\n\r\nConfiguration\r\ngit\r\n GitHub SSH keys\r\n GitHub PAT\r\n\r\nFor the workshop\r\nCorrections\r\nReuse\r\nCitation\r\n\r\n\r\n  Please install the latest versions of  RStudio, and git.\r\n\r\nInstallation\r\n  Windows\r\nDownload  at:https://cran.r-project.org/\r\n         Click on Download R for Windows          Click on base          Click on Download R 4.1.3 for Windows          Open R-4.1.3-win.exe and follow instructions\r\n\r\nDownload RStudio Desktop at:https://www.rstudio.com/products/rstudio/download/#download\r\n         Download the version for Windows 10/11 (the .exe and not the .zip)          Open RStudio-2022.02.1-461.exe and follow instructions          Check if RStudio has found . Launch RStudio and run:\r\n\r\n\r\nR.version.string\r\n## [1] \"R version 4.1.3 (2022-03-10)\"\r\n\r\n\r\n\r\n\r\nDownload git at:https://git-scm.com/downloads\r\n         Download the 64-bit version for Windows          Open Git-2.35.1-64-bit.exe and follow instructions          Check if RStudio has found git. Launch RStudio and run:\r\n\r\n\r\nSys.which(\"git\")\r\n## C:/Program Files/Git/bin/git.exe\r\n\r\n\r\n\r\n\r\nDownload Rtools4.0 at:https://cran.r-project.org/bin/windows/Rtools/rtools40.html\r\n         Download the 64-bit version for Windows          Open rtools40-x86_64.exe and follow instructions\r\nThe installation of Rtools4.0 is optional, but this software is required to install packages (from sources) containing compiled code (C/C++/Fortran). Rtools4.0 contains in particular the utility make.\r\n         Once Rtools4.0 is installed, you need to tell  where to find Rtools4.0 utilities. Open RStudio and run:\r\n\r\n\r\ncat(\"PATH='${RTOOLS40_HOME}\\\\usr\\\\bin;${PATH}'\\r\\n\", file = \"~/.Renviron\", append = TRUE)\r\n\r\n\r\n\r\nAn hidden file .Renviron has been created (or modified) in you personal folder and contains the line PATH='${RTOOLS40_HOME}\\usr\\bin;${PATH}' (the path to Rtools4). At each start  will read this file.\r\nRestart RStudio and check that  find the utility make:\r\n\r\n\r\nSys.which(\"make\")\r\n## \"C:/rtools40/usr/bin/make.exe\"\r\n\r\n\r\n\r\nNow you can install packages from sources:\r\n\r\n\r\ninstall.packages(\"jsonlite\", type = \"source\")\r\n\r\n\r\n\r\n\r\nInstall pandoc (optional)\r\nThe package rmarkdown requires the software pandoc to convert document from one format (e.g. .Rmd) to another (e.g. .html).\r\nDownload the latest version of pandoc at: https://github.com/jgm/pandoc/releases, and follow instructions.\r\n\r\nInstall a LaTeX distribution (optional)\r\nIf you want to convert documents from .Rmd to .pdf, you will need LaTeX. You can install a lightened distribution using the  package tinytex. Open RStudio and run:\r\n\r\n\r\n## Install tinytex ----\r\ninstall.packages(\"tinytex\")\r\n\r\n## Install LaTeX ----\r\ntinytex::install_tinytex()\r\n\r\n\r\n\r\nN.B. If you already have a LaTeX distribution, do not install tinytex.\r\n\r\n  macOS\r\nTh easiest way to set up your environment is by using the package manager for macOS Homebrew. With this tool you can install (and update) your software directly from the terminal. First you need to install the Apple software Command Line Tools for Xcode.\r\nOpen a terminal, run this line and accept the license:\r\n## Install Xcode Command Line Tools ----\r\nsudo xcode-select --install\r\nThen you can install Homebrew:\r\n## Install Homebrew ----\r\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\r\n\r\n## Check installation ----\r\nbrew --version\r\n## Homebrew 3.4.7\r\n\r\n## Update repositories (list of available software) ----\r\nbrew update\r\nFollow these lines to install your environment:\r\n## Install utilities for R ----\r\nbrew install --cask xquartz     ## Graphical window system\r\nbrew install gfortran           ## FORTRAN compiler for GCC\r\n\r\n## Install R ----\r\nbrew install --cask r\r\n\r\n## Install RStudio Desktop ----\r\nbrew install --cask rstudio\r\n\r\n## Install git ----\r\nbrew install git\r\n\r\n## Install pandoc ----\r\nbrew install pandoc             ## Convert documents (Rmd, html, etc.)\r\nOpen RStudio and check your installation:\r\n\r\n\r\nR.version.string\r\n## \"R version 4.1.3 (2022-03-10)\"\r\n\r\nSys.which(\"git\")\r\n##            git\r\n## \"/usr/bin/git\"\r\n\r\nSys.which(\"make\")\r\n##            make \r\n## \"/usr/bin/make\"\r\n\r\nSys.which(\"pandoc\")\r\n##            pandoc \r\n## \"/usr/local/bin/pandoc\"\r\n\r\n\r\n\r\n\r\nIf you want to convert documents from .Rmd to .pdf, you will need LaTeX. You can install a lightened distribution using the  package tinytex. Open RStudio and run:\r\n\r\n\r\n## Install tinytex ----\r\ninstall.packages(\"tinytex\")\r\n\r\n## Install LaTeX ----\r\ntinytex::install_tinytex()\r\n\r\n\r\n\r\n\r\n   Congrats! You have successfully install your environment. The following commands will install system libraries (software) required by some  packages (sf, sp, rgdal, rgeos, raster, terra, xml, etc.).\r\n## Install other utilities for R (spatial and others) ----\r\nbrew install libgit2 \r\nbrew install libxml2 \r\nbrew install poppler \r\nbrew install geos gdal netcdf proj udunits\r\nTo keep your system up-to-date, run regularly:\r\n## Update environment ----\r\nbrew update && brew upgrade --greedy\r\n\r\n Ubuntu\r\nFirst check your version of Ubuntu in a terminal:\r\n## Check Ubuntu version ----\r\ncat /etc/issue\r\n## Ubuntu 20.04 LTS\r\n\r\nTable 1. List of CRAN repositories for different versions of Ubuntu\r\nRelease\r\nRelease name\r\nRepository URL\r\n22.04 LTS\r\nJammy Jellyfish\r\nhttps://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/\r\n21.10\r\nImpish Indri\r\nhttps://cloud.r-project.org/bin/linux/ubuntu impish-cran40/\r\n21.04\r\nHirsute Hippo\r\nhttps://cloud.r-project.org/bin/linux/ubuntu hirsute-cran40/\r\n20.04 LTS\r\nFocal Fossa\r\nhttps://cloud.r-project.org/bin/linux/ubuntu focal-cran40/\r\n18.04 LTS\r\nBionic Beaver\r\nhttps://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/\r\n16.04 LTS\r\nXenial Xerus\r\nhttps://cloud.r-project.org/bin/linux/ubuntu xenial-cran40/\r\n\r\nInstall  by following these steps (change the URL below by the one specific to your version of Ubuntu, cf. Table 1) :\r\n## Install APT utilities ----\r\nsudo apt install software-properties-common\r\n\r\n## Add CRAN GPG key ----\r\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9\r\n\r\n## Add CRAN repository to APT repositories list ----\r\nsudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/'\r\n\r\n## Update packages list ----\r\nsudo apt update\r\n\r\n## Install R ----\r\nsudo apt install r-base\r\n\r\n## Install R (for development, recommended) ----\r\nsudo apt install build-essential\r\nsudo apt install r-base-dev\r\n\r\nTo install RStudio Desktop visit this page: https://www.rstudio.com/products/rstudio/download/#download, download the .deb file for Ubuntu 18+/Debian 10+ and install it. If you have an older version of Ubuntu (16.04), visit this page: https://www.rstudio.com/products/rstudio/older-versions/\r\nAlternatively, you can install RStudio Desktop from the terminal:\r\n## Install wget utility ----\r\nsudo apt install wget\r\n\r\n## Download RStudio Desktop installer (Ubuntu >= 18.04) ----\r\nwget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-2022.02.1-461-amd64.deb\r\n\r\n## Download RStudio Desktop installer (Ubuntu 16.04 only) ----\r\n# wget https://download1.rstudio.org/desktop/xenial/amd64/rstudio-1.4.1106-amd64.deb\r\n\r\n## Install RStudio Desktop ----\r\nsudo dpkg -i rstudio-2022.02.1-461-amd64.deb\r\n# sudo dpkg -i rstudio-1.4.1106-amd64.deb\r\n\r\n## Remove installer ----\r\nrm rstudio-2022.02.1-461-amd64.deb\r\n# rm rstudio-1.4.1106-amd64.deb\r\n\r\nNow let’s install git:\r\nsudo apt install git\r\nFinally, install pandoc (to convert documents using rmarkdown):\r\nsudo apt install pandoc\r\n\r\nOpen RStudio and check your installation:\r\n\r\n\r\nR.version.string\r\n## \"R version 4.1.3 (2022-03-10)\"\r\n\r\nSys.which(\"git\")\r\n##            git\r\n## \"/usr/bin/git\"\r\n\r\nSys.which(\"make\")\r\n##            make \r\n## \"/usr/bin/make\"\r\n\r\nSys.which(\"pandoc\")\r\n##            pandoc \r\n## \"/usr/bin/pandoc\"\r\n\r\n\r\n\r\n\r\nIf you want to convert documents from .Rmd to .pdf, you will need LaTeX. You can install a lightened distribution using the  package tinytex. Open RStudio and run:\r\n\r\n\r\n## Install tinytex ----\r\ninstall.packages(\"tinytex\")\r\n\r\n## Install LaTeX ----\r\ntinytex::install_tinytex()\r\n\r\n\r\n\r\n\r\n   Congrats! You have successfully install your environment. The following commands will install system libraries (software) required by some  packages (sf, sp, rgdal, rgeos, raster, terra, xml, etc.).\r\n## Install other utilities for R (spatial and others) ----\r\nsudo apt install libgdal-dev libproj-dev libgeos-dev libudunits2-dev libnetcdf-dev\r\nsudo apt install libcairo2-dev libmagick++-dev\r\nsudo apt install libpoppler-cpp-dev\r\nTo keep your system up-to-date, do not forget to frequently run:\r\n## Update system ----\r\nsudo apt update && sudo apt upgrade\r\n\r\nConfiguration\r\ngit\r\nTo use git, you need to store your credentials (user name and email) that will be added to all your commits. Open a terminal (you can use the terminal of RStudio) and run:\r\ngit config --global user.name  \"Jane Doe\"\r\ngit config --global user.email \"jane.doe@mail.com\"\r\nWhen you create a new git project the default branch will be named master. It’s recommended to replace master by main (for more information read this article).\r\nOn a terminal, run:\r\ngit config --global init.defaultBranch \"main\"\r\nFrom now when you will initialize git in a new project the default branch will be main.\r\n\r\n GitHub SSH keys\r\nTo communicate with GitHub, you can use the protocol HTTPS (default) or the protocol SSH (recommended). The protocol SSH is a more secure method of logging into a remote server (GitHub). To use this protocol, you need to generate an SSH keys pair that consists in creating two long strings of characters: a public key and a private key. You can place the public key on any server (for instance GitHub), and then connect to the server using a device (your laptop) that has access to the private key.\r\nTo generate a new SSH keys pair proceed as follow:\r\n     Create an account on GitHub at https://github.com/signup (if not already done)      Open RStudio and click on: Tools > Global options > Git/SVN      Click on Create RSA Key and then click on Create (you can omit the passphrase). This new SSH keys pair has been stored in ~/.ssh/.      Click on View public key and copy it      Go to the page https://github.com/settings/keys and click on New SSH key      Choose a name for your key (e.g. your laptop name) and paste your public key      Finally click on Add SSH key\r\n\r\n   If you are on Ubuntu you need to install the following utility:\r\nsudo apt install ssh-askpass\r\n\r\nLet’s test the SSH connection to GitHub. Open a terminal and run (you need to accept the fingerprint, just enter yes):\r\nssh -T git@github.com\r\nCongrats! You can now communicate with GitHub using the SSH protocol.\r\n\r\n   From now, you need to use the SSH URL when connecting a new GitHub project (named remote).\r\n## URL HTTPS ----\r\nhttps://github.com/frbcesab/workshop-free.git\r\n\r\n## URL SSH (use this one) ----\r\ngit@github.com:frbcesab/workshop-free.git\r\n\r\n   If you lose your private SSH key you won’t be able to establish a connection with GitHub. You’ll need to delete your SSH key on GitHub and to create a new one.\r\n\r\n GitHub PAT\r\nIf you want to use the GitHub API, essentially with the  package usethis, you need to create a GitHub Personal Access Token (PAT).\r\nGo to https://github.com/settings/tokens\r\n     Click on Generate new token      Choose a name for your new token (e.g. your laptop name)      In the section scopes, select at least repo and workflow      Copy this token.\r\nThen open RStudio and run:\r\n\r\n\r\n## Install usethis package ----\r\ninstall.packages(\"usethis\")\r\n\r\n## Open ~/.Renviron file ----\r\nusethis::edit_r_environ()\r\n## • Modify '~/.Renviron'\r\n## • Restart R for changes to take effect\r\n\r\n\r\n\r\nIn the ~/.Renviron file, add this new line: GITHUB_PAT='XXX' where XXX is your token. Do not forget to restart .\r\n\r\nFinally let’s tell usethis to use the SSH protocol. Open RStudio and run:\r\n\r\n\r\n## Open ~/.Rprofile file ----\r\nusethis::edit_r_profile()\r\n## • Modify '~/.Rprofile'\r\n## • Restart R for changes to take effect\r\n\r\n\r\n\r\nIn the ~/.Rprofile file, add this new line: options(usethis.protocol = \"ssh\"). Do not forget to restart .\r\n\r\nFor the workshop\r\nYou will need to install the following R packages:\r\n\r\n\r\n## CRAN packages ----\r\npkgs <- c(\"funrar\", \"mFD\", \"remotes\", \"sf\", \"terra\")\r\ninstall.packages(pkgs)\r\n\r\n## GitHub packages ----\r\nremotes::install_github(\"frbcesab/funbiogeo\")\r\n\r\n\r\n\r\n\r\nIn addition, you must download a copy of the content of the workshop. We recommend that you create a copy (fork) of the GitHub repository of the workshop on your GitHub space. Then, using RStudio you will clone (download) your fork.\r\nGo to the GitHub URL of the workshop repository: https://github.com/frbcesab/workshop-free. Then follow these instructions to fork the repository.\r\n  Fork the repository (1)  Fork the repository (2)  Get the SSH URL of your fork (1)  Get the SSH URL of your fork (2)Then open RStudio Desktop and follow these instructions to create a new project from your GitHub repository (fork of the original repository)\r\n  Clone your fork (1)  Clone your fork (2)  Clone your fork (3)Congrats! You have your own copy of the workshop content (data, instructions and courses). If you want you can use git to commit changes during the workshop and send these modifications to your GitHub repository.\r\nCorrections\r\nIf you see mistakes or want to suggest changes, please Create an issue on the source repository.\r\nReuse\r\nThe material of this website is licensed under Creative Commons Attribution CC BY 4.0. Source code is available at https://github.com/frbcesab/workshop-free/.\r\nCitation\r\nCasajus N, Grénié M, Magneville C & Villéger S (2022) Workshop FRB-CESAB & FREE Working Group: Functional Rarity and Diversity in Ecology.\r\n\r\n\r\n\r\n",
      "last_modified": "2022-06-08T17:54:38+02:00"
    },
    {
      "path": "practice.html",
      "title": "Practice",
      "author": [],
      "contents": "\r\n\r\nContents\r\nAbout\r\nPrerequisites\r\nData description\r\nQuestions\r\nPart 1. Build a functional space using the mFD package\r\n1.0. Compute summaries about your data\r\n1.1. What about the traits?\r\n1.2. Computing distances between species based on functional traits\r\n1.3. Building functional spaces and chosing the best one\r\n1.3.1. Computing several multimensional functional spaces and assessing their quality\r\n1.3.2. Illustrating the quality of the functional spaces\r\n1.3.3. Testing the correlation between functional axes and traits\r\n\r\n1.4. Plotting the selected functional space and position of species\r\n\r\nPart 2. Computing and plotting FD indices using the mFD package\r\n2.1. Computing and plotting alpha FD indices\r\n2.2. Computing and plotting beta FD indices\r\n\r\nPart 3. Functional rarity\r\n\r\nAbout\r\n\r\nThis tutorial describes the basic workflow showing how to compute step by step functional diversity (FD) indices in a multidimensional space. It is divided in four parts:\r\nComputing trait-based distances and the multidimensional functional space\r\nUsing the mFD package to compute FD alpha and beta indices and plot them (Magneville et al. 2021)\r\nUsing the funrar package to compute Functional Rarity indices (Violle et al. 2017)\r\nUsing the funbiogeo package to compute analyses in functional biogeography (Violle et al. 2014)\r\n\r\nN.B. You can chose to do Part 2, Part 3 and Part 4 in the order that you want but Part 1 has to be realized first.\r\n\r\nPrerequisites\r\nBe sure you have followed the instructions to set up your system (e.g. R version >= 3.5).\r\nIf not already done, please install the following R packages:\r\n\r\n\r\n## CRAN packages ----\r\npkgs <- c(\"funrar\", \"mFD\", \"remotes\", \"sf\", \"terra\")\r\ninstall.packages(pkgs)\r\n\r\n## GitHub packages ----\r\nremotes::install_github(\"frbcesab/funbiogeo\")\r\n\r\n\r\n\r\n\r\nData description\r\nThe dataset used as study case all along this workshop is the Fruits dataset based on 25 types of fruits (i.e. species) distributed in 10 fruits baskets (i.e. assemblages). Each fruit is characterized by five traits values summarized in the following table:\r\n\r\nTrait name\r\nTrait measurement\r\nTrait type\r\nNumber of classes\r\nClasses code\r\nUnit\r\nSize\r\nMaximal diameter\r\nOrdinal\r\n5\r\n0-1 ; 1-3 ; 3-5 ; 5-10 ; 10-20\r\ncm\r\nPlant\r\nGrowth form\r\nCategorical\r\n4\r\ntree ; shrub ; vine ; forb\r\nNA\r\nClimate\r\nClimatic niche\r\nOrdinal\r\n3\r\ntemperate ; subtropical ; tropical\r\nNA\r\nSeed\r\nSeed type\r\nOrdinal\r\n3\r\nnone ; pip ; pit\r\nNA\r\nSugar\r\nSugar\r\nContinuous\r\nNA\r\nNA\r\ng/kg\r\n\r\nThe use of the mFD and funrar packages is based on two datasets:\r\na data.frame summarizing traits values for each species called fruits_traits in this tutorial\r\nCode\r\n\r\n\r\n## Loading data ----\r\ndata(\"fruits_traits\", package = \"mFD\")\r\n\r\n## Removing fuzzy traits in this tutorial ----\r\nfruits_traits <- fruits_traits[ , -c(6:8)]\r\n\r\n## Display the table ----\r\nknitr::kable(head(fruits_traits),\r\n             caption = \"Species x traits data.frame\")\r\n\r\n\r\nTable 1: Species x traits data.frame\r\n\r\nSize\r\nPlant\r\nClimate\r\nSeed\r\nSugar\r\napple\r\n5-10cm\r\ntree\r\ntemperate\r\npip\r\n103.9\r\napricot\r\n3-5cm\r\ntree\r\ntemperate\r\npit\r\n92.4\r\nbanana\r\n10-20cm\r\ntree\r\ntropical\r\nnone\r\n122.3\r\ncurrant\r\n0-1cm\r\nshrub\r\ntemperate\r\npip\r\n73.7\r\nblackberry\r\n1-3cm\r\nshrub\r\ntemperate\r\npip\r\n48.8\r\nblueberry\r\n0-1cm\r\nforb\r\ntemperate\r\npip\r\n100.0\r\n\r\n\r\na matrix summarizing species assemblages called baskets_fruits_weights in this tutorial. Weights in this matrix can be occurrence data, abundance, biomass, coverage, etc. The studied example works with biomass (i.e. grams of a fruit in a basket) and this matrix looks as follows:\r\nCode\r\n\r\n\r\n## Loading data ----\r\ndata(\"baskets_fruits_weights\", package = \"mFD\")\r\n\r\n## Display the table ----\r\nknitr::kable(as.data.frame(baskets_fruits_weights[1:6, 1:6]), \r\n             centering = TRUE,\r\n             caption = \"Species x assemblages matrix based on the **fruits** dataset\")\r\n\r\n\r\nTable 2: Species x assemblages matrix based on the fruits dataset\r\n\r\napple\r\napricot\r\nbanana\r\ncurrant\r\nblackberry\r\nblueberry\r\nbasket_1\r\n400\r\n0\r\n100\r\n0\r\n0\r\n0\r\nbasket_2\r\n200\r\n0\r\n400\r\n0\r\n0\r\n0\r\nbasket_3\r\n200\r\n0\r\n500\r\n0\r\n0\r\n0\r\nbasket_4\r\n300\r\n0\r\n0\r\n0\r\n0\r\n0\r\nbasket_5\r\n200\r\n0\r\n0\r\n0\r\n0\r\n0\r\nbasket_6\r\n100\r\n0\r\n200\r\n0\r\n0\r\n0\r\n\r\nQuestions\r\nUsing this Practice, we ask the following questions:\r\nHow different are the fruits baskets based on their functional traits?\r\n{{ Question functional rarity }}\r\n{{ Question funbiogeo }}\r\nTo answer these three questions, the first step is to build a functional space based on species traits on which functional diversity and functional rarity indices will be then computed.\r\n\r\nPart 1. Build a functional space using the mFD package\r\n\r\n1.0. Compute summaries about your data\r\n\r\nThis part is not developed in this Practice (not enough time to see everything ;) ), but it could be useful to know that the mFD package can compute summaries about your traits or assemblage data. For instance, you can compute a matrix of species occurrence in each assemblage (needed in 2.2).\r\n\r\n\r\n## Summary of the assemblages * species data.frame ----\r\nasb_sp_fruits_summ <- mFD::asb.sp.summary(asb_sp_w = baskets_fruits_weights)\r\nasb_sp_fruits_occ  <- asb_sp_fruits_summ$\"asb_sp_occ\"\r\n\r\nhead(asb_sp_fruits_occ)\r\n\r\n\r\n         apple apricot banana currant blackberry blueberry cherry\r\nbasket_1     1       0      1       0          0         0      1\r\nbasket_2     1       0      1       0          0         0      1\r\nbasket_3     1       0      1       0          0         0      1\r\nbasket_4     1       0      0       0          0         0      0\r\nbasket_5     1       0      0       0          0         0      0\r\nbasket_6     1       0      1       0          0         0      0\r\n         grape grapefruit kiwifruit lemon lime litchi mango melon\r\nbasket_1     0          0         0     1    0      0     0     1\r\nbasket_2     0          0         0     1    0      0     0     1\r\nbasket_3     0          0         0     1    0      0     0     1\r\nbasket_4     0          0         1     1    0      0     0     0\r\nbasket_5     0          0         1     1    0      0     0     0\r\nbasket_6     0          0         0     0    1      1     1     0\r\n         orange passion_fruit peach pear pineapple plum raspberry\r\nbasket_1      0             1     0    1         0    0         0\r\nbasket_2      0             1     0    1         0    0         0\r\nbasket_3      0             1     0    1         0    0         0\r\nbasket_4      1             0     1    1         0    1         0\r\nbasket_5      1             0     1    1         0    1         0\r\nbasket_6      1             0     0    0         1    0         0\r\n         strawberry tangerine water_melon\r\nbasket_1          1         0           0\r\nbasket_2          1         0           0\r\nbasket_3          1         0           0\r\nbasket_4          0         1           0\r\nbasket_5          0         1           0\r\nbasket_6          0         0           1\r\n\r\n\r\n1.1. What about the traits?\r\n\r\nThe first thing to do before starting analyses is to know your data. To do so, you must be able to characterize the traits you are using (i.e. tell the package what type of traits you are using). That is why mFD package needs a data.frame summarizing the type of each trait (i.e. each column of the fruits_traits data.frame).\r\nCode\r\n\r\n\r\n## Loading data ----\r\ndata(\"fruits_traits_cat\", package = \"mFD\")\r\n\r\n## Removing fuzzy traits in this tutorial ----\r\nfruits_traits_cat <- fruits_traits_cat[-c(6:8), ]\r\n\r\n## Thus remove the \"fuzzy_name\" column ----\r\nfruits_traits_cat <- fruits_traits_cat[ , -3]\r\n\r\n## Displaying the table ----\r\nknitr::kable(head(fruits_traits_cat), \r\n             caption = \"Traits types based on **fruits & baskets** dataset\")\r\n\r\n\r\nTable 3: Traits types based on fruits & baskets dataset\r\ntrait_name\r\ntrait_type\r\nSize\r\nO\r\nPlant\r\nN\r\nClimate\r\nO\r\nSeed\r\nO\r\nSugar\r\nQ\r\n\r\nThe first column contains traits name. The second column contains traits type following this code:\r\nN: nominal trait (factor variable)\r\nO: ordinal traits (ordered variable)\r\nC: circular traits (integer values) (N.B. circular traits can not be used in mFD function used to compute functional distance but ok for summary function and function to group species into Functional Entities)\r\nQ: quantitative traits (numeric values)\r\nF: fuzzy traits (described with several values defined in several columns in the fruits_traits data.frame)\r\n\r\n1.2. Computing distances between species based on functional traits\r\n\r\nThe next step toward the computation of functional diversity indices is to estimate functional traits-based distances between species in order to build the functional space in which indices will be computed.\r\nTo compute trait-based distances, we will use the mFD::funct.dist() function which includes the following arguments:\r\nCode\r\n\r\n\r\nsp_dist_fruits <- mFD::funct.dist(\r\n  sp_tr         = fruits_traits,\r\n  tr_cat        = fruits_traits_cat,\r\n  metric        = \"gower\",\r\n  scale_euclid  = \"scale_center\",\r\n  ordinal_var   = \"classic\",\r\n  weight_type   = \"equal\",\r\n  stop_if_NA    = TRUE)\r\n\r\n\r\n\r\nsp_tr is the species x trait data.frame\r\ntr_cat is the data.frame summarizing trait type for each trait\r\nmetric is a character string referring to the metric used to compute distances. Two metrics are available and the choice depends on your traits data:\r\nif all traits are continuous use the Euclidean distance (metric = \"euclidean\") and check the Compute Functional Diversity Indices based on Only Continuous Traits tutorial which explains how to build a multidimensional space from traits through PCA analysis or considering directly each trait as a dimension.\r\nif you have non-continuous traits use the Gower distance (metric = \"gower\") as this method allows traits weighting. This method can also deal with fuzzy traits.\r\n\r\nscale_euclid is a character string referring to the way the user wants to scale euclidean traits. You can either chose to scale by range (range), use the center transformation (center), use the scale transformation (scale), use the scale-center transformation (scale_center) or you can chose not to scale (noscale).\r\nordinal_var is a character string specifying the method to be used for ordinal variables (i.e. ordered). You can either chose to treat ordinal variables as continuous variables (with \"classic\" option) or to treat ordinal variables as ranks (with metric or podani options, see mFD::funct.dist() help file for detail).\r\nweight_type is a character string referring to the type of method to weight traits. You can either chose to define weights using the tr_cat data.frame (cf. step 1.1) (user option) or you can chose to give the same weight to all traits (equal option). (N.B. Using mFD, you can not define weights for fuzzy traits, use gawdis package instead)\r\nstop_if_NA is a logical value to stop or not the process if the sp_tr data.frame contains NA. If the sp_tr data.frame contains NA you can either chose to compute anyway functional distances (but keep in mind that Functional measures are sensitive to missing traits!) or you can delete species with missing or extrapolate missing traits (see Johnson et al. (2020)).\r\nThis function returns a dist object with traits-based distances between all pairs of species:\r\nCode\r\n\r\n\r\n## Output of the function mFD::funct.dist() ----\r\nround(sp_dist_fruits, 3)\r\n\r\n\r\n              apple apricot banana currant blackberry blueberry\r\napricot       0.166                                            \r\nbanana        0.375   0.541                                    \r\ncurrant       0.391   0.426  0.767                             \r\nblackberry    0.376   0.410  0.751   0.084                     \r\nblueberry     0.355   0.410  0.731   0.236      0.320          \r\ncherry        0.233   0.099  0.558   0.425      0.409     0.389\r\ngrape         0.380   0.446  0.705   0.372      0.356     0.336\r\ngrapefruit    0.192   0.327  0.268   0.501      0.483     0.537\r\nkiwifruit     0.219   0.353  0.595   0.372      0.356     0.364\r\nlemon         0.208   0.343  0.384   0.517      0.433     0.553\r\nlime          0.370   0.404  0.345   0.578      0.494     0.614\r\nlitchi        0.466   0.332  0.391   0.658      0.642     0.622\r\nmango         0.395   0.361  0.220   0.786      0.771     0.750\r\nmelon         0.285   0.419  0.560   0.407      0.391     0.229\r\norange        0.117   0.251  0.292   0.474      0.459     0.462\r\npassion_fruit 0.461   0.527  0.414   0.553      0.537     0.516\r\npeach         0.127   0.062  0.503   0.464      0.448     0.472\r\npear          0.009   0.157  0.384   0.383      0.367     0.353\r\npineapple     0.557   0.708  0.233   0.734      0.718     0.502\r\nplum          0.156   0.009  0.532   0.435      0.419     0.401\r\nraspberry     0.382   0.416  0.758   0.091      0.007     0.327\r\nstrawberry    0.376   0.410  0.751   0.284      0.200     0.120\r\ntangerine     0.153   0.218  0.323   0.444      0.428     0.408\r\nwater_melon   0.281   0.415  0.556   0.410      0.395     0.226\r\n              cherry grape grapefruit kiwifruit lemon  lime litchi\r\napricot                                                           \r\nbanana                                                            \r\ncurrant                                                           \r\nblackberry                                                        \r\nblueberry                                                         \r\ncherry                                                            \r\ngrape          0.347                                              \r\ngrapefruit     0.426 0.573                                        \r\nkiwifruit      0.453 0.200      0.373                             \r\nlemon          0.442 0.589      0.116     0.389                   \r\nlime           0.503 0.650      0.277     0.550 0.161             \r\nlitchi         0.233 0.514      0.459     0.686 0.475 0.336       \r\nmango          0.362 0.686      0.287     0.614 0.403 0.364  0.172\r\nmelon          0.518 0.465      0.308     0.266 0.424 0.585  0.751\r\norange         0.351 0.498      0.075     0.302 0.091 0.252  0.384\r\npassion_fruit  0.572 0.319      0.453     0.280 0.470 0.331  0.405\r\npeach          0.161 0.508      0.265     0.308 0.281 0.442  0.394\r\npear           0.242 0.389      0.184     0.210 0.200 0.361  0.475\r\npineapple      0.791 0.738      0.435     0.562 0.551 0.512  0.624\r\nplum           0.090 0.437      0.336     0.363 0.352 0.413  0.323\r\nraspberry      0.416 0.363      0.490     0.363 0.426 0.487  0.649\r\nstrawberry     0.409 0.356      0.483     0.356 0.433 0.494  0.642\r\ntangerine      0.281 0.428      0.145     0.372 0.161 0.222  0.314\r\nwater_melon    0.515 0.462      0.311     0.262 0.427 0.588  0.748\r\n              mango melon orange passion_fruit peach  pear pineapple\r\napricot                                                             \r\nbanana                                                              \r\ncurrant                                                             \r\nblackberry                                                          \r\nblueberry                                                           \r\ncherry                                                              \r\ngrape                                                               \r\ngrapefruit                                                          \r\nkiwifruit                                                           \r\nlemon                                                               \r\nlime                                                                \r\nlitchi                                                              \r\nmango                                                               \r\nmelon         0.580                                                 \r\norange        0.312 0.368                                           \r\npassion_fruit 0.434 0.546  0.378                                    \r\npeach         0.322 0.357  0.210         0.589                      \r\npear          0.404 0.276  0.108         0.470 0.119                \r\npineapple     0.452 0.327  0.460         0.419 0.670 0.551          \r\nplum          0.351 0.428  0.261         0.518 0.071 0.152     0.701\r\nraspberry     0.777 0.398  0.465         0.543 0.455 0.373     0.725\r\nstrawberry    0.770 0.191  0.458         0.537 0.448 0.367     0.518\r\ntangerine     0.342 0.437  0.070         0.309 0.280 0.161     0.510\r\nwater_melon   0.576 0.004  0.364         0.542 0.354 0.272     0.324\r\n               plum raspberry strawberry tangerine\r\napricot                                           \r\nbanana                                            \r\ncurrant                                           \r\nblackberry                                        \r\nblueberry                                         \r\ncherry                                            \r\ngrape                                             \r\ngrapefruit                                        \r\nkiwifruit                                         \r\nlemon                                             \r\nlime                                              \r\nlitchi                                            \r\nmango                                             \r\nmelon                                             \r\norange                                            \r\npassion_fruit                                     \r\npeach                                             \r\npear                                              \r\npineapple                                         \r\nplum                                              \r\nraspberry     0.426                               \r\nstrawberry    0.419     0.207                     \r\ntangerine     0.209     0.435      0.428          \r\nwater_melon   0.425     0.401      0.194     0.434\r\n\r\n\r\n1.3. Building functional spaces and chosing the best one\r\n\r\n1.3.1. Computing several multimensional functional spaces and assessing their quality\r\n\r\nIn order to generate a multidimensional space in which functional diversity indices are computed (Mouillot et al. 2013, we will perform a PCoA using the trait-based distances (and if required a functional dendrogram). mFD evaluates the quality of PCoA-based multidimensional spaces according to the deviation between trait-based distances and distances in the functional space (extension of Maire et al. (2015) framework). For that, we will use the mFD::quality.fspaces() function:\r\n\r\nCode\r\n\r\n\r\nfspaces_quality_fruits <- mFD::quality.fspaces(\r\n  sp_dist             = sp_dist_fruits,\r\n  maxdim_pcoa         = 10,\r\n  deviation_weighting = \"absolute\",\r\n  fdist_scaling       = FALSE,\r\n  fdendro             = \"average\")\r\n\r\n\r\n\r\nsp_dist is the dist object with pairwise trait-based distance between species as computed in step 1.2\r\nmaxdim_pcoa is the maximum number of PCoA axes to consider to build multidimensional spaces. Actually, the maximum number of dimensions considered depends on the number of PCoA axes with positive eigenvalues.\r\ndeviation_weighting refers to the method(s) used to weight the difference between species pairwise distances in the functional space and trait-based distances. You can chose between:\r\nabsolute: absolute differences are used to compute the mean absolute deviation (mad) . It reflects the actual magnitude of errors that will affect FD metrics.\r\nsquared: squared differences are used to compute the root of mean square deviation (rmsd). This weighting puts more weight to the large deviations between trait-based distances and distances in the functional space.\r\nBoth quality metrics can be used with: deviation_weighting = c(\"absolute\", \"squared\").\r\n\r\nfdist_scaling specifies whether distances in the functional space should be scaled before computing differences with trait-based distances. Scaling ensures that trait-based distances and distances in the functional space have the same maximum. Scaling distances implies that the quality of the functional space accounts for congruence in distances rather than their equality.\r\nN.B. The combination of deviation_weighting and fdist_scaling arguments leads to four possible quality metrics: mad, rmsd, mad_scaled and rmsd_scaled\r\nfdendro specifies the clustering algorithm to compute a functional dendrogram. NULL means no dendrogram computed. The chosen algorithm must be one of the method recognized by the stats::hclust() function from the stats package.\r\nThis function returns a list various objects:\r\n\r\na data.frame gathering for each space (in rows), values of quality metric(s) (in columns)\r\nCode\r\n\r\n\r\n## Quality metrics of functional spaces ----\r\nround(fspaces_quality_fruits$\"quality_fspaces\", 3)\r\n\r\n\r\n               mad\r\npcoa_1d      0.150\r\npcoa_2d      0.073\r\npcoa_3d      0.047\r\npcoa_4d      0.040\r\npcoa_5d      0.049\r\npcoa_6d      0.055\r\npcoa_7d      0.060\r\npcoa_8d      0.064\r\npcoa_9d      0.065\r\npcoa_10d     0.065\r\ntree_average 0.082\r\n\r\n\r\nlist with details required for other tasks in step 1.4 to plot functional space quality and in step 1.5 to plot functional space.\r\n\r\nN.B. The space with the best quality has the lowest quality metric. Here, thanks to mad values, we can see that the 4D space is the best one. That is why the following of this Practice will use this multidimensional space.\r\n\r\n1.3.2. Illustrating the quality of the functional spaces\r\n\r\nWith the mFD package, it is possible to illustrate the quality of PCoA-based multidimensional spaces according to deviation between trait-based distances and distances in the functional space. For that, we use the mFD::quality.fspace.plot() function with the following arguments:\r\n\r\nCode\r\n\r\n\r\nmFD::quality.fspaces.plot(\r\n  fspaces_quality            = fspaces_quality_fruits,\r\n  quality_metric             = \"mad\",\r\n  fspaces_plot               = c(\"tree_average\", \"pcoa_2d\", \"pcoa_3d\", \r\n                                 \"pcoa_4d\", \"pcoa_5d\", \"pcoa_6d\"),\r\n  name_file                  = NULL,\r\n  range_dist                 = NULL,\r\n  range_dev                  = NULL,\r\n  range_qdev                 = NULL,\r\n  gradient_deviation         = c(neg = \"darkblue\", nul = \"grey80\", pos = \"darkred\"),\r\n  gradient_deviation_quality = c(low = \"yellow\", high = \"red\"),\r\n  x_lab                      = \"Trait-based distance\")\r\n\r\n\r\n\r\nfspaces_quality is the output of the mFD::quality.fspaces() function (step 1.3.1).\r\nquality_metric refers to the quality metric used. It should be one of the column name(s) of the table gathering quality metric values (output of mFD::quality.fspaces() called quality_fspaces) (here: fspaces_quality_fruits$quality_fspaces) Thus it can be: mad, rmsd, mad_scaled or rmsd_scaled (see step 1.3.1)\r\nfspaces_plot refers to the names of spaces for which quality has to be illustrated (up to 10). Names are those used in the output of mFD::quality.fspaces() function showing the values of the quality metric.\r\nname_file refers to the name of file to save (without extension) if the user wants to save the figure. If the user only wants the plot to be displayed, then name_file = NULL.\r\nrange_dist, range_dev, range_qdev are arguments to set ranges of panel axes (check function help for further information).\r\ngradient_deviation and gradient_deviation_quality are arguments to set points colors (check function help for further information).\r\nxlab is a parameter to set x-axis label.\r\n\r\nThis function generates a figure with three panels (in rows) for each selected functional space (in columns). Each column represents a functional space, the value of the quality metric is written on the top of each column. The x-axis of all panels represents trait-based distances. The y-axis is different for each row:\r\non the first (top) row, the y-axis represents species functional distances in the multidimensional space. Thus, the closer species are to the 1:1 line, the better distances in the functional space fit trait-based ones.\r\non the second row, the y-axis shows the raw deviation of species distances in the functional space compared to trait-based distances. Thus, the raw deviation reflects the distance to the 1:1 line.\r\non the third row (bottom), the y-axis shows the absolute or squared deviation of the (“scaled”) distance in the functional space. It is the deviation that is taken into account for computing the quality metric.\r\nCode\r\n\r\n\r\nmFD::quality.fspaces.plot(\r\n  fspaces_quality            = fspaces_quality_fruits,\r\n  quality_metric             = \"mad\",\r\n  fspaces_plot               = c(\"tree_average\", \"pcoa_2d\", \"pcoa_3d\",\r\n                                 \"pcoa_4d\", \"pcoa_5d\", \"pcoa_6d\"),\r\n  name_file                  = NULL,\r\n  range_dist                 = NULL,\r\n  range_dev                  = NULL,\r\n  range_qdev                 = NULL,\r\n  gradient_deviation         = c(neg = \"darkblue\", nul = \"grey80\", pos = \"darkred\"),\r\n  gradient_deviation_quality = c(low = \"yellow\", high = \"red\"),\r\n  x_lab                      = \"Trait-based distance\")\r\n\r\n\r\n\r\n\r\n\r\nFor the 2D space, on the top row there are a lot of points below the 1:1 lines, meaning that distances are overestimated in this multidimensional space. Looking at panels, we can see that the 4D space is the one in which points are the closest to the 1:1 line on the top row,and the closest to the x-axis for the two bottom rows, which reflects a better quality compared to other functional spaces / dendrogram. For the dendrogram, we can see on the top row that species pairs arrange in horizontal lines, meaning that different trait-based distances have then the same cophenetic distance on the dendrogram.\r\n\r\n1.3.3. Testing the correlation between functional axes and traits\r\n\r\nmFD allows to test for correlations between traits and functional axes and then illustrate possible correlations (continuous traits = linear model is computed and r2 and associated p-value are returned; non-continuous traits = Kruskal-Wallis test is computed and eta2 statistic is returned). The function mFD::traits.faxes.cor() allows to test and plot correlation and needs the following arguments:\r\nsp_tr is the species x traits data.frame\r\nsp_faxes_coord is a matrix of species coordinates taken from the outputs of the mFD::quality.fspaces() function with columns representing axes on which functional space must be computed. For instance, in this tutorial, we will plot the functional space for 4 and 10 dimensions (cf. the two examples below). The whole sp_faxes_coord can be retrieved through the output of the mFD::quality.fspaces() function:\r\nCode\r\n\r\n\r\nsp_faxes_coord_fruits <- fspaces_quality_fruits$\"details_fspaces\"$\"sp_pc_coord\"\r\n\r\n\r\n\r\nplot is a logical value indicating whether correlations should be illustrated or not. If this option is set to TRUE, traits-axis relationships are plotted through scatterplot for continuous traits and boxplot for non-continuous traits.\r\nThe function mFD::traits.faxes.cor() works as follows:\r\n\r\nCode\r\n\r\n\r\nfruits_tr_faxes <- mFD::traits.faxes.cor(\r\n  sp_tr          = fruits_traits, \r\n  sp_faxes_coord = sp_faxes_coord_fruits[ , c(\"PC1\", \"PC2\", \"PC3\", \"PC4\")], \r\n  plot           = TRUE)\r\n\r\n\r\n\r\nWe can print only traits with significant effect on position along one of the axis and look at the plots:\r\nCode\r\n\r\n\r\n## Print traits with significant effect ----\r\nfruits_tr_faxes$\"tr_faxes_stat\"[which(fruits_tr_faxes$\"tr_faxes_stat\"$\"p.value\" < 0.05), ]\r\n\r\n\r\n     trait axis           test stat value p.value\r\n1     Size  PC1 Kruskal-Wallis eta2 0.308  0.0377\r\n3     Size  PC3 Kruskal-Wallis eta2 0.326  0.0325\r\n5    Plant  PC1 Kruskal-Wallis eta2 0.471  0.0049\r\n6    Plant  PC2 Kruskal-Wallis eta2 0.382  0.0116\r\n8    Plant  PC4 Kruskal-Wallis eta2 0.264  0.0360\r\n9  Climate  PC1 Kruskal-Wallis eta2 0.731  0.0001\r\n13    Seed  PC1 Kruskal-Wallis eta2 0.201  0.0402\r\n14    Seed  PC2 Kruskal-Wallis eta2 0.593  0.0005\r\n20   Sugar  PC4   Linear Model   r2 0.682  0.0000\r\n\r\n## Plot ----\r\nfruits_tr_faxes$\"tr_faxes_plot\"\r\n\r\n\r\n\r\n\r\n\r\nWe can thus see that PC1 is mostly driven by Climate (temperate on the left and tropical on the right) and Plant Type (forb & shrub on the left vs tree & vine on the right) and Size (large fruits on the right) with weaker influence of Seed (eta2 < 0.25). Then, PC2 is mostly driven by Seed (no seed on the left and pit seed on the right) with weaker influence of Plant Type. PC3 is driven by only one trait, Size. And finally PC4 is mostly driven by Sugar (high sugar content on the right and low sugar content on the left) with a weaker influence of Plant Type.\r\n\r\n1.4. Plotting the selected functional space and position of species\r\n\r\nOnce the user has selected the dimensionality of the functional space, mFD allows you to plot the given multidimensional functional space and the position of species in all 2-dimensions spaces made by pairs of axes.\r\n\r\nThe mFD::funct.space.plot() function allows to illustrate the position of all species along pairs of space axes.\r\n\r\nThis function allows to plot with many possibilities to change colors/shapes of each plotted element. Here are listed the main arguments:\r\nsp_faxes_coord is a matrix of species coordinates taken from the outputs of the mFD::quality.fspaces() function with columns representing axes on which functional space must be computed. For instance, in this tutorial, we will plot the functional space for 4 and 10 dimensions (cf. the two examples below). The whole sp_faxes_coord can be retrieved through the output of the mFD::quality.fspaces() function:\r\n\r\nCode\r\n\r\n\r\nsp_faxes_coord_fruits <- fspaces_quality_fruits$\"details_fspaces\"$\"sp_pc_coord\"\r\n\r\n\r\n\r\n\r\nfaxes is a vector containing names of axes to plot. If set to NULL, the first four functional axes will be plotted.\r\nfaxes_nm is a vector containing labels of faxes (following faxes vector rank). If NULL, labels follow faxes vector names.\r\nrange_faxes is a vector to complete if the user wants to set specific limits for functional axes. If range_faxes = c(NA, NA), the range is computed according to the range of values among all axes.\r\nplot_ch is a logical value used to draw or not the 2D convex-hull filled by the global pool of species. Color, fill and opacity of the convex hull can be chosen through other inputs, please refer to the function’s help.\r\nplot_sp_nm is a vector containing species names to plot. If NULL, no species names plotted. Name size, color and font can be chosen through other inputs, please refer to the function’s help.\r\nplot_vertices is a logical value used to plot or not vertices with a different shape than other species. Be careful these representations are 2D representations, thus vertices of the convex-hull in the n-multidimensional space can be close to the center of the hull projected in 2D. Color, fill, shape and size of vertices can be chosen through other inputs, please refer to the function’s help.\r\ncolor_bg is a R color or an hexadecimal color code referring to the color of the background of the plot.\r\nother inputs are used to chose color, fill, size, and shape of species from the global pool, please refer to the function’s help.\r\ncheck_input is a recurrent argument in the mFD package. It defines whether inputs should be checked before computation or not. Possible error messages will thus be more understandable for the user than R error messages (Recommendation: set it as TRUE).\r\n\r\nHere are the plots for the fruits & baskets dataset for the first four PCoA axis:\r\n\r\nCode\r\n\r\n\r\nbig_plot <- mFD::funct.space.plot(\r\n  sp_faxes_coord  = sp_faxes_coord_fruits[ , c(\"PC1\", \"PC2\", \"PC3\", \"PC4\")],\r\n  faxes           = c(\"PC1\", \"PC2\", \"PC3\", \"PC4\"),\r\n  name_file       = NULL,\r\n  faxes_nm        = NULL,\r\n  range_faxes     = c(NA, NA),\r\n  color_bg        = \"grey95\",\r\n  color_pool      = \"darkgreen\",\r\n  fill_pool       = \"white\",\r\n  shape_pool      = 21,\r\n  size_pool       = 1,\r\n  plot_ch         = TRUE,\r\n  color_ch        = \"black\",\r\n  fill_ch         = \"white\",\r\n  alpha_ch        = 0.5,\r\n  plot_vertices   = TRUE,\r\n  color_vert      = \"blueviolet\",\r\n  fill_vert       = \"blueviolet\",\r\n  shape_vert      = 23,\r\n  size_vert       = 1,\r\n  plot_sp_nm      = NULL,\r\n  nm_size         = 3,\r\n  nm_color        = \"black\",\r\n  nm_fontface     = \"plain\",\r\n  check_input     = TRUE)\r\n\r\nbig_plot$\"patchwork\"\r\n\r\n\r\n\r\n\r\n\r\nHere, the convex-hull of the species pool is plotted in white and axis have the same range to get rid of bias based on different axis scales. Species being vertices of the 4D convex hull are in purple.\r\n\r\nPart 2. Computing and plotting FD indices using the mFD package\r\n\r\nThe mFD::alpha.fd.multidim() function allows computing alpha and beta FD indices.\r\n\r\n2.1. Computing and plotting alpha FD indices\r\n\r\nUsing the alpha.fd.multidim() function, you can compute up to nine alpha FD indices:\r\nFDis Functional Dispersion: the biomass weighted deviation of species traits values from the center of the functional space filled by the assemblage i.e. the biomass-weighted mean distance to the biomass-weighted mean trait values of the assemblage.\r\nFRic Functional Richness: the proportion of functional space filled by species of the studied assemblage, i.e. the volume inside the convex-hull shaping species. To compute FRic the number of species must be at least higher than the number of functional axis + 1.\r\nFDiv Functional Divergence: the proportion of the biomass supported by the species with the most extreme functional traits i.e. the ones located close to the edge of the convex-hull filled by the assemblage.\r\nFEve Functional Evenness: the regularity of biomass distribution in the functional space using the Minimum Spanning Tree linking all species present in the assemblage.\r\nFSpe Functional Specialization: the biomass weighted mean distance to the mean position of species from the global pool (present in all assemblages).\r\nFMPD Functional Mean Pairwise Distance: the mean weighted distance between all species pairs.\r\nFNND Functional Mean Nearest Neighbour Distance: the weighted distance to the nearest neighbor within the assemblage.\r\nFIde Functional Identity: the mean traits values for the assemblage. FIde is always computed when FDis is computed.\r\nFOri Functional Originality: the weighted mean distance to the nearest species from the global species pool.\r\nThe function is used as follow:\r\nCode\r\n\r\n\r\nalpha_fd_indices_fruits <- mFD::alpha.fd.multidim(\r\n  sp_faxes_coord   = sp_faxes_coord_fruits[ , c(\"PC1\", \"PC2\", \"PC3\", \"PC4\")],\r\n  asb_sp_w         = baskets_fruits_weights,\r\n  ind_vect         = c(\"fdis\", \"fric\", \"fdiv\", \r\n                       \"fspe\", \"fide\"),\r\n  scaling          = TRUE,\r\n  check_input      = TRUE,\r\n  details_returned = TRUE)\r\n\r\n\r\n\r\n\r\nThe arguments and their use are listed below:\r\nsp_faxes_coord is the species coordinates matrix. This dataframe gathers only axis of the functional space you have chosen based on step 4.\r\nasb_sp_w is the matrix linking species and assemblages they belong to (summarized in step 1).\r\nind_vect is a vector with names of diversity functional indices to compute.\r\nscaling is a logical value indicating whether indices should be scaled between 0 and 1. If scaling is to be done, this argument must be set to TRUE.\r\ncheck_input is a recurrent argument in the mFD package. It defines whether inputs should be checked before computation or not. Possible error messages will thus be more understandable for the user than R error messages (Recommendation: set it as TRUE).\r\ndetails_returned is used if the user wants to store information that are used in graphical functions. If the user wants to plot FD indices, then details_returned must be set to TRUE.\r\n\r\nN.B. Use lowercase letters to enter FD indices names\r\n\r\nThe function has two main outputs:\r\na data.frame gathering indices values in each assemblage (for FIde values, there are as many columns as there are axes to the studied functional space).\r\nCode\r\n\r\n\r\nfd_ind_values_fruits <- alpha_fd_indices_fruits$\"functional_diversity_indices\"\r\nfd_ind_values_fruits\r\n\r\n\r\n          sp_richn      fdis        fric      fdiv      fspe\r\nbasket_1         8 0.4763773 0.162830681 0.5514453 0.4127138\r\nbasket_2         8 0.7207823 0.162830681 0.8064809 0.5781232\r\nbasket_3         8 0.7416008 0.162830681 0.8089535 0.5888104\r\nbasket_4         8 0.2958614 0.007880372 0.6080409 0.3106937\r\nbasket_5         8 0.3673992 0.007880372 0.7288912 0.3488358\r\nbasket_6         8 0.8001980 0.147936148 0.8937934 0.7930809\r\nbasket_7         8 0.8121314 0.147936148 0.8989094 0.7443406\r\nbasket_8         8 0.4678159 0.036480112 0.7113688 0.6363814\r\nbasket_9         8 0.5577452 0.036480112 0.7787237 0.6309078\r\nbasket_10        8 0.5505783 0.025774304 0.7741681 0.4587432\r\n             fide_PC1     fide_PC2    fide_PC3     fide_PC4\r\nbasket_1  -0.01473662 -0.009461738 -0.05670043 -0.001823969\r\nbasket_2   0.01887361 -0.061601373 -0.04427402  0.021249327\r\nbasket_3   0.04724418 -0.056571400 -0.03631846  0.018045257\r\nbasket_4   0.03994897  0.052581211 -0.08413271 -0.001343112\r\nbasket_5   0.02349573  0.039069220 -0.08187248 -0.010262902\r\nbasket_6   0.24320913 -0.114434642  0.01394977  0.025500282\r\nbasket_7   0.13341179 -0.183609095 -0.01782549  0.021494300\r\nbasket_8  -0.24497368  0.036194656  0.04748935 -0.038827673\r\nbasket_9  -0.21021559  0.029339706  0.05516746 -0.041392184\r\nbasket_10 -0.05375867 -0.005743348 -0.05649324  0.041191011\r\n\r\n\r\na details list of data.frames and lists gathering information such as coordinates of centroids, distances and identity of the nearest neighbour, distances to the centroid, etc. The user does not have to directly use it but it will be useful if FD indices are then plotted. It can be retrieved through:\r\nCode\r\n\r\n\r\ndetails_list_fruits <- alpha_fd_indices_fruits$\"details\"\r\n\r\n\r\n\r\n\r\nThen, you can plot functional indices using the mFD::alpha.multidim.plot() for up to two assemblages:\r\n\r\nCode\r\n\r\n\r\nplots_alpha <- mFD::alpha.multidim.plot(\r\n  output_alpha_fd_multidim = alpha_fd_indices_fruits,\r\n  plot_asb_nm              = c(\"basket_1\", \"basket_5\"),\r\n  ind_nm                   = c(\"fdis\", \"fric\", \"fdiv\", \r\n                              \"fspe\", \"fide\"),\r\n  faxes                    = NULL,\r\n  faxes_nm                 = NULL,\r\n  range_faxes              = c(NA, NA),\r\n  color_bg                 = \"grey95\",\r\n  shape_sp                 = c(pool = 3, asb1 = 21, asb2 = 21),\r\n  size_sp                  = c(pool = 0.7, asb1 = 1, asb2 = 1),\r\n  color_sp                 = c(pool = \"grey50\", asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\r\n  color_vert               = c(pool = \"grey50\", asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\r\n  fill_sp                  = c(pool = NA, asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\r\n  fill_vert                = c(pool = NA, asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\r\n  color_ch                 = c(pool = NA, asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\r\n  fill_ch                  = c(pool = \"white\", asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\r\n  alpha_ch                 = c(pool = 1, asb1 = 0.3, asb2 = 0.3),\r\n  shape_centroid_fdis      = c(asb1 = 22,  asb2 = 24),\r\n  shape_centroid_fdiv      = c(asb1 = 22,  asb2 = 24),\r\n  shape_centroid_fspe      = 23,\r\n  color_centroid_fspe      = \"black\",\r\n  size_sp_nm               = 3, \r\n  color_sp_nm              = \"black\",\r\n  plot_sp_nm               = NULL,\r\n  fontface_sp_nm           = \"plain\",\r\n  save_file                = FALSE,\r\n  check_input              = TRUE) \r\n\r\n\r\n\r\n\r\nAs you can see, this function has a lot of arguments: most of them are graphical arguments allowing the user to chose colors, shapes, sizes, scales, etc. This tutorial only presents main arguments. To learn about the use of graphical arguments, check the function help file. The main arguments of this function are listed below:\r\noutput_alpha_fd_multidim is the output of the `mFD::alpha.fd.multidim() function.\r\nplot_asb_nm is a vector gathering name(s) of assemblage(s) to plot.\r\nind_vect is a vector gathering FD indices to plot. Plots are available for FDis, FIde, FEve, FRic, FDiv, FOri, FSpe, and FNND.\r\nfaxes is a vector containing names of axes to plot. You can only plot from two to four axes labels for graphical reasons.\r\nfaxes_nm is a vector with axes labels if the user ants different axes labels than faxes ones.\r\nrange_faxes is a vector with minimum and maximum values for axes. If range_faxes = c(NA, NA), the range is computed according to the range of values among all axes, all axes having thus the same range. To have a fair representation of species positions in all plots, all axes must have the same range.\r\nplot_sp_nm is a vector containing species names to plot. If NULL, then no name is plotted.\r\nsize, color, fill, and shape arguments for each component of the graphs i.e. species of the global pool, species of the studied assemblage(s), vertices, centroids and segments. If you have to plot two assemblages, then inputs should be formatted as follow: c(pool = ..., asb1 = ..., asb2 = ...) for inputs used for global pool and studied assemblages and c(asb1 = ..., asb2 = ...) for inputs used for studied assemblages only.\r\ncheck_input is a recurrent argument in mFD. It defines whether inputs should be checked before computation or not. Possible error messages will thus be more understandable for the user than R error messages (Recommendation: set it as TRUE.\r\n\r\nThen, using these arguments, here are the output plots for the fruits & baskets dataset:\r\n\r\nFRic representation: the colored shapes reflect the convex-hull of the studied assemblages and the white shape reflects the convex-hull of the global pool of species:\r\nCode\r\n\r\n\r\nplots_alpha$\"fric\"$\"patchwork\"\r\n\r\n\r\n\r\n\r\nFDiv representation: the gravity centers of vertices (i.e. species with the most extreme functional traits) of each assemblages are plotted as a square and a triangle. The two colored circles represent the mean distance of species to the gravity center for each assemblage. Species of each assemblage have different size given their relative weight into the assemblage.\r\nCode\r\n\r\n\r\nplots_alpha$\"fdiv\"$\"patchwork\"\r\n\r\n\r\n\r\n\r\nFSpe representation: colored traits represent distances of each species from a given assemblage to the center of gravity of the global pool (i.e center of the functional space). the center of gravity is plotted with a purple diamond. Species of each assemblage have different size given their relative weight into the assemblage.\r\nCode\r\n\r\n\r\nplots_alpha$\"fspe\"$\"patchwork\"\r\n\r\n\r\n\r\n\r\nFDis representation: colored traits represent distances of each species from a given assemblage to the center of gravity of species of the assemblage (defined by FIde values). The center of gravity of each assemblage is plotted using a square and a triangle. Species of each assemblage havedifferent size given their relative weight into the assemblage.\r\nCode\r\n\r\n\r\nplots_alpha$\"fdis\"$\"patchwork\"\r\n\r\n\r\n\r\n\r\nFIde representation:colored lines refer to the weighted average position of species of each assemblage along each axis. Species of each assemblage have different size given their relative weight into the assemblage.\r\nCode\r\n\r\n\r\nplots_alpha$\"fide\"$\"patchwork\"\r\n\r\n\r\n\r\n\r\nN.B. Using the mFD package, you can plot more than two assemblages but not with the alpha.multidim.plot() function. There are several specific functions for each step of the plot: build the background of the plot (background.plot()), plot the pool of species you are working on (pool.plot()), plot species from the studied assemblages (species.plot()) function and lastly plot the wanted metric using related function (fric.plot(), fdiv.plot(), fide.plot(),fdis.plot(), feve.plot(), fnnd.plot(), fori.plot(), fspe.plot()). Plots for different axes combination can be gathered into a single plot using the panels.to.patchwork() function.\r\n\r\n2.2. Computing and plotting beta FD indices\r\n\r\nN.B. Some Mac OS X 10.15 may encounter some issues with the beta_*() functions.\r\nmFD package allows you to compute beta diversity indices for each assemblage pairs following Villeger et al. 2013. For that we will use the mFD::beta.fd.multidim() function. This function can compute two families of functional beta diversity indices, either Jaccard or Sorensen.\r\nIn this example, we will use Jaccard index. For each assemblages pair, the dissimilarity index is decomposed into two additive components: turnover and nestedness-resultant.\r\nNB The turnover component is the highest if there is no shared traits combination between the two assemblages. The nestedness component is the highest if one assemblage hosts a small subset of the functional strategies present in the other.\r\nThe mFD::beta.fd.multidim() function has the main following arguments:\r\nCode\r\n\r\n\r\nbeta_fd_indices_fruits <- mFD::beta.fd.multidim(\r\n      sp_faxes_coord   = sp_faxes_coord_fruits[ , c(\"PC1\", \"PC2\", \"PC3\", \"PC4\")],\r\n      asb_sp_occ       = asb_sp_fruits_occ,\r\n      check_input      = TRUE,\r\n      beta_family      = c(\"Jaccard\"),\r\n      details_returned = TRUE)\r\n\r\n\r\n\r\nsp_faxes_coord is the species coordinates matrix. This dataframe gathers only axis of the functional space you have chosen based on step 4.\r\nasb_sp_occ is the matrix of occurrence (coded as 0/1) of species assemblages (summarized in step 1).\r\ncheck_input is a recurrent argument in the mFD package. It defines whether inputs should be checked before computation or not. Possible error messages will thus be more understandable for the user than R error messages (Recommendation: set it as TRUE.\r\nbeta_family a character string for the type of beta-diversity index to compute, it can either be Jaccard or Sorensen.\r\ndetails_returned is a logical value indicating whether details of outputs must be stored. It should be stored if you plan to use the graphical function to illustrate beta diversity indices thereafter.\r\nThere are also other arguments for parallelisation options. Check the function help file for more explanation.\r\n\r\nThe function returns a list containing:\r\na dist object with beta indices values for each pair of assemblages:\r\nCode\r\n\r\n\r\nhead(beta_fd_indices_fruits$\"pairasb_fbd_indices\", 10)\r\n\r\n\r\n$jac_diss\r\n              basket_1     basket_2     basket_3     basket_4\r\nbasket_2  0.000000e+00                                       \r\nbasket_3  0.000000e+00 0.000000e+00                          \r\nbasket_4  9.654002e-01 9.654002e-01 9.654002e-01             \r\nbasket_5  9.654002e-01 9.654002e-01 9.654002e-01 2.071138e-15\r\nbasket_6  8.701848e-01 8.701848e-01 8.701848e-01 9.972695e-01\r\nbasket_7  8.701848e-01 8.701848e-01 8.701848e-01 9.972695e-01\r\nbasket_8  9.797030e-01 9.797030e-01 9.797030e-01 1.000000e+00\r\nbasket_9  9.797030e-01 9.797030e-01 9.797030e-01 1.000000e+00\r\nbasket_10 9.151338e-01 9.151338e-01 9.151338e-01 9.303584e-01\r\n              basket_5     basket_6     basket_7     basket_8\r\nbasket_2                                                     \r\nbasket_3                                                     \r\nbasket_4                                                     \r\nbasket_5                                                     \r\nbasket_6  9.972695e-01                                       \r\nbasket_7  9.972695e-01 0.000000e+00                          \r\nbasket_8  1.000000e+00 1.000000e+00 1.000000e+00             \r\nbasket_9  1.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00\r\nbasket_10 9.303584e-01 9.983508e-01 9.983508e-01 9.702788e-01\r\n              basket_9\r\nbasket_2              \r\nbasket_3              \r\nbasket_4              \r\nbasket_5              \r\nbasket_6              \r\nbasket_7              \r\nbasket_8              \r\nbasket_9              \r\nbasket_10 9.702788e-01\r\n\r\n$jac_turn\r\n              basket_1     basket_2     basket_3     basket_4\r\nbasket_2  0.000000e+00                                       \r\nbasket_3  0.000000e+00 0.000000e+00                          \r\nbasket_4  4.320333e-01 4.320333e-01 4.320333e-01             \r\nbasket_5  4.320333e-01 4.320333e-01 4.320333e-01 2.071138e-15\r\nbasket_6  8.627528e-01 8.627528e-01 8.627528e-01 9.723344e-01\r\nbasket_7  8.627528e-01 8.627528e-01 8.627528e-01 9.723344e-01\r\nbasket_8  9.425331e-01 9.425331e-01 9.425331e-01 1.000000e+00\r\nbasket_9  9.425331e-01 9.425331e-01 9.425331e-01 1.000000e+00\r\nbasket_10 5.990146e-01 5.990146e-01 5.990146e-01 8.385233e-01\r\n              basket_5     basket_6     basket_7     basket_8\r\nbasket_2                                                     \r\nbasket_3                                                     \r\nbasket_4                                                     \r\nbasket_5                                                     \r\nbasket_6  9.723344e-01                                       \r\nbasket_7  9.723344e-01 0.000000e+00                          \r\nbasket_8  1.000000e+00 1.000000e+00 1.000000e+00             \r\nbasket_9  1.000000e+00 1.000000e+00 1.000000e+00 0.000000e+00\r\nbasket_10 8.385233e-01 9.944208e-01 9.944208e-01 9.638833e-01\r\n              basket_9\r\nbasket_2              \r\nbasket_3              \r\nbasket_4              \r\nbasket_5              \r\nbasket_6              \r\nbasket_7              \r\nbasket_8              \r\nbasket_9              \r\nbasket_10 9.638833e-01\r\n\r\n$jac_nest\r\n             basket_1    basket_2    basket_3    basket_4    basket_5\r\nbasket_2  0.000000000                                                \r\nbasket_3  0.000000000 0.000000000                                    \r\nbasket_4  0.533366944 0.533366944 0.533366944                        \r\nbasket_5  0.533366944 0.533366944 0.533366944 0.000000000            \r\nbasket_6  0.007431956 0.007431956 0.007431956 0.024935183 0.024935183\r\nbasket_7  0.007431956 0.007431956 0.007431956 0.024935183 0.024935183\r\nbasket_8  0.037169839 0.037169839 0.037169839 0.000000000 0.000000000\r\nbasket_9  0.037169839 0.037169839 0.037169839 0.000000000 0.000000000\r\nbasket_10 0.316119149 0.316119149 0.316119149 0.091835053 0.091835053\r\n             basket_6    basket_7    basket_8    basket_9\r\nbasket_2                                                 \r\nbasket_3                                                 \r\nbasket_4                                                 \r\nbasket_5                                                 \r\nbasket_6                                                 \r\nbasket_7  0.000000000                                    \r\nbasket_8  0.000000000 0.000000000                        \r\nbasket_9  0.000000000 0.000000000 0.000000000            \r\nbasket_10 0.003930032 0.003930032 0.006395544 0.006395544\r\n\r\na list containing details such as inputs, vertices of the global pool and of each assemblage and FRic values for each assemblage\r\nCode\r\n\r\n\r\nbeta_fd_indices_fruits$\"details\"\r\n\r\n\r\n$inputs\r\n$inputs$sp_faxes_coord\r\n                        PC1           PC2          PC3          PC4\r\napple          0.0055715265  0.0350421604 -0.097471237  0.022402932\r\napricot        0.0051324906  0.1993950375 -0.095659935  0.041498534\r\nbanana         0.4180172546 -0.1414728845  0.008086992  0.006165812\r\ncurrant       -0.3278449659  0.0536374098  0.049052945 -0.076408888\r\nblackberry    -0.3034346496  0.0526909897  0.049135314 -0.142658171\r\nblueberry     -0.2815708070 -0.0866665191  0.051316336  0.112502412\r\ncherry        -0.0180809780  0.2978695529 -0.029313202  0.111166444\r\ngrape         -0.2228504050  0.0885963887  0.225751135  0.190718259\r\ngrapefruit     0.1450603259 -0.0673074635 -0.119455606 -0.084037260\r\nkiwifruit     -0.1550698937 -0.0814958746  0.005740138  0.086787104\r\nlemon          0.1067949113  0.0007714157 -0.088895714 -0.207026513\r\nlime           0.2079695595  0.0199956576  0.099157708 -0.266782185\r\nlitchi         0.2917434196  0.2537533311  0.202206065  0.041136776\r\nmango          0.4393412201  0.0559467870 -0.054626734  0.119804224\r\nmelon         -0.1493941692 -0.2420723462 -0.151024241  0.070247222\r\norange         0.1236282949 -0.0086604744 -0.050235439 -0.046156784\r\npassion_fruit  0.1101264243 -0.1062790540  0.342728218  0.031929461\r\npeach          0.0351203321  0.1465415655 -0.199699124  0.049647666\r\npear          -0.0005886084  0.0297927029 -0.105703762  0.010290065\r\npineapple      0.1991811945 -0.4756825960  0.075904777  0.042696533\r\nplum           0.0126064681  0.1989177835 -0.084010036  0.058965350\r\nraspberry     -0.3070933066  0.0543878274  0.049178225 -0.156730076\r\nstrawberry    -0.2917242495 -0.0898440618  0.025237344 -0.047647147\r\ntangerine      0.1039035285  0.0526165085  0.041894666 -0.048619225\r\nwater_melon   -0.1465449176 -0.2404738440 -0.149294834  0.080107453\r\n\r\n$inputs$asb_sp_occ\r\n          apple apricot banana currant blackberry blueberry cherry\r\nbasket_1      1       0      1       0          0         0      1\r\nbasket_2      1       0      1       0          0         0      1\r\nbasket_3      1       0      1       0          0         0      1\r\nbasket_4      1       0      0       0          0         0      0\r\nbasket_5      1       0      0       0          0         0      0\r\nbasket_6      1       0      1       0          0         0      0\r\nbasket_7      1       0      1       0          0         0      0\r\nbasket_8      0       0      0       1          1         1      1\r\nbasket_9      0       0      0       1          1         1      1\r\nbasket_10     1       1      0       0          0         0      0\r\n          grape grapefruit kiwifruit lemon lime litchi mango melon\r\nbasket_1      0          0         0     1    0      0     0     1\r\nbasket_2      0          0         0     1    0      0     0     1\r\nbasket_3      0          0         0     1    0      0     0     1\r\nbasket_4      0          0         1     1    0      0     0     0\r\nbasket_5      0          0         1     1    0      0     0     0\r\nbasket_6      0          0         0     0    1      1     1     0\r\nbasket_7      0          0         0     0    1      1     1     0\r\nbasket_8      1          0         0     1    0      0     0     0\r\nbasket_9      1          0         0     1    0      0     0     0\r\nbasket_10     1          1         0     0    0      0     0     1\r\n          orange passion_fruit peach pear pineapple plum raspberry\r\nbasket_1       0             1     0    1         0    0         0\r\nbasket_2       0             1     0    1         0    0         0\r\nbasket_3       0             1     0    1         0    0         0\r\nbasket_4       1             0     1    1         0    1         0\r\nbasket_5       1             0     1    1         0    1         0\r\nbasket_6       1             0     0    0         1    0         0\r\nbasket_7       1             0     0    0         1    0         0\r\nbasket_8       0             0     0    0         0    0         1\r\nbasket_9       0             0     0    0         0    0         1\r\nbasket_10      0             0     0    1         0    1         0\r\n          strawberry tangerine water_melon\r\nbasket_1           1         0           0\r\nbasket_2           1         0           0\r\nbasket_3           1         0           0\r\nbasket_4           0         1           0\r\nbasket_5           0         1           0\r\nbasket_6           0         0           1\r\nbasket_7           0         0           1\r\nbasket_8           1         0           0\r\nbasket_9           1         0           0\r\nbasket_10          1         0           0\r\n\r\n\r\n$pool_vertices\r\n [1] \"grape\"         \"lemon\"         \"water_melon\"   \"banana\"       \r\n [5] \"raspberry\"     \"cherry\"        \"blueberry\"     \"grapefruit\"   \r\n [9] \"melon\"         \"strawberry\"    \"peach\"         \"apricot\"      \r\n[13] \"passion_fruit\" \"litchi\"        \"lime\"          \"pineapple\"    \r\n[17] \"mango\"         \"currant\"      \r\n\r\n$asb_FRic\r\n   basket_1    basket_2    basket_3    basket_4    basket_5 \r\n0.162830681 0.162830681 0.162830681 0.007880372 0.007880372 \r\n   basket_6    basket_7    basket_8    basket_9   basket_10 \r\n0.147936148 0.147936148 0.036480112 0.036480112 0.025774304 \r\n\r\n$asb_vertices\r\n$asb_vertices$basket_1\r\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \r\n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \r\n\r\n$asb_vertices$basket_2\r\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \r\n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \r\n\r\n$asb_vertices$basket_3\r\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \r\n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \r\n\r\n$asb_vertices$basket_4\r\n[1] \"peach\"     \"lemon\"     \"tangerine\" \"pear\"      \"plum\"     \r\n[6] \"orange\"    \"kiwifruit\"\r\n\r\n$asb_vertices$basket_5\r\n[1] \"peach\"     \"lemon\"     \"tangerine\" \"pear\"      \"plum\"     \r\n[6] \"orange\"    \"kiwifruit\"\r\n\r\n$asb_vertices$basket_6\r\n[1] \"litchi\"      \"lime\"        \"apple\"       \"banana\"     \r\n[5] \"orange\"      \"pineapple\"   \"mango\"       \"water_melon\"\r\n\r\n$asb_vertices$basket_7\r\n[1] \"litchi\"      \"lime\"        \"apple\"       \"banana\"     \r\n[5] \"orange\"      \"pineapple\"   \"mango\"       \"water_melon\"\r\n\r\n$asb_vertices$basket_8\r\n[1] \"strawberry\" \"blueberry\"  \"raspberry\"  \"cherry\"     \"grape\"     \r\n[6] \"lemon\"      \"currant\"   \r\n\r\n$asb_vertices$basket_9\r\n[1] \"strawberry\" \"blueberry\"  \"raspberry\"  \"cherry\"     \"grape\"     \r\n[6] \"lemon\"      \"currant\"   \r\n\r\n$asb_vertices$basket_10\r\n[1] \"grape\"      \"melon\"      \"plum\"       \"apricot\"    \"grapefruit\"\r\n[6] \"strawberry\"\r\n\r\na vector containing the FRic value for each assemblage retrieved through the details_beta list:\r\nCode\r\n\r\n\r\nbeta_fd_indices_fruits$\"details\"$\"asb_FRic\"\r\n\r\n\r\n   basket_1    basket_2    basket_3    basket_4    basket_5 \r\n0.162830681 0.162830681 0.162830681 0.007880372 0.007880372 \r\n   basket_6    basket_7    basket_8    basket_9   basket_10 \r\n0.147936148 0.147936148 0.036480112 0.036480112 0.025774304 \r\n\r\n\r\na list of vectors containing names of species being vertices of the convex hull for each assemblage retrieved through the details_beta list:\r\n\r\n\r\nbeta_fd_indices_fruits$\"details\"$\"asb_vertices\"\r\n\r\n\r\n$basket_1\r\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \r\n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \r\n\r\n$basket_2\r\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \r\n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \r\n\r\n$basket_3\r\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \r\n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \r\n\r\n$basket_4\r\n[1] \"peach\"     \"lemon\"     \"tangerine\" \"pear\"      \"plum\"     \r\n[6] \"orange\"    \"kiwifruit\"\r\n\r\n$basket_5\r\n[1] \"peach\"     \"lemon\"     \"tangerine\" \"pear\"      \"plum\"     \r\n[6] \"orange\"    \"kiwifruit\"\r\n\r\n$basket_6\r\n[1] \"litchi\"      \"lime\"        \"apple\"       \"banana\"     \r\n[5] \"orange\"      \"pineapple\"   \"mango\"       \"water_melon\"\r\n\r\n$basket_7\r\n[1] \"litchi\"      \"lime\"        \"apple\"       \"banana\"     \r\n[5] \"orange\"      \"pineapple\"   \"mango\"       \"water_melon\"\r\n\r\n$basket_8\r\n[1] \"strawberry\" \"blueberry\"  \"raspberry\"  \"cherry\"     \"grape\"     \r\n[6] \"lemon\"      \"currant\"   \r\n\r\n$basket_9\r\n[1] \"strawberry\" \"blueberry\"  \"raspberry\"  \"cherry\"     \"grape\"     \r\n[6] \"lemon\"      \"currant\"   \r\n\r\n$basket_10\r\n[1] \"grape\"      \"melon\"      \"plum\"       \"apricot\"    \"grapefruit\"\r\n[6] \"strawberry\"\r\n\r\nThen, the package allows the user to illustrate functional beta-diversity indices for a pair of assemblages in a multidimensional space using the mFD::beta.multidim.plot() function. The output of this function is a figure showing the overlap between convex hulls shaping each of the two species assemblages.\r\nThe plotting function has a large number of arguments, allowing the user to chose graphical options. Arguments are listed below:\r\nCode\r\n\r\n\r\nbeta_plot_fruits <- mFD::beta.multidim.plot(\r\n  output_beta_fd_multidim = beta_fd_indices_fruits,\r\n  plot_asb_nm             = c(\"basket_1\", \"basket_4\"),\r\n  beta_family             = c(\"Jaccard\"),\r\n  plot_sp_nm              = c(\"apple\", \"lemon\", \"pear\"),\r\n  faxes                   = paste0(\"PC\", 1:4),\r\n  name_file               = NULL,\r\n  faxes_nm                = NULL,\r\n  range_faxes             = c(NA, NA),\r\n  color_bg                = \"grey95\",\r\n  shape_sp                = c(\"pool\" = 3.0, asb1 = 22, asb2 = 21),\r\n  size_sp                 = c(\"pool\" = 0.8, asb1 =  1, asb2 =  1),\r\n  color_sp                = c(\"pool\" = \"grey50\", asb1 = \"blue\", asb2 = \"red\"),\r\n  fill_sp                 = c(\"pool\" = NA, asb1 = \"white\", asb2 = \"white\"),\r\n  fill_vert               = c(\"pool\" = NA, asb1 = \"blue\", asb2 = \"red\"),\r\n  color_ch                = c(\"pool\" = NA, asb1 = \"blue\", asb2 = \"red\"),\r\n  fill_ch                 = c(\"pool\" = \"white\", asb1 = \"blue\", asb2 = \"red\"),\r\n  alpha_ch                = c(\"pool\" = 1, asb1 = 0.3, asb2 = 0.3),\r\n  nm_size                 = 3,\r\n  nm_color                = \"black\",\r\n  nm_fontface             = \"plain\",\r\n  check_input             = TRUE)\r\n\r\n\r\n\r\noutput_beta_fd_multidim is the output of the mFD::beta.fd.multidim() function retrieved before as beta_fd_indices.\r\nplot_asb_nm is a vector containing the name of the two assemblages to plot. Here plots of indices will be shown for basket_1 and basket_4.\r\nbeta_family refers to the family of the plotted index. It must be the same as the family chosen to compute beta functional indices values with the mFD::beta.fd.multidim() function.\r\nplot_sp_nm is a vector containing the names of species the user want to plot, if any. If no the user does not want to plot any species name, then this argument must be set up to NULL. Here, apple, cherry and lemon will be plotted on the graph.\r\nfaxes is a vector containing the names of the functional axes of the plotted functional space. Here, the figure will be plotted for PC1, PC2 and PC3. This function allows you to plot between two and four axes for graphical reasons.\r\nname_file is a character string with the name of the file to save the figure (without extension). If the user does not want to save the file and only display it, this argument must be set up to NULL.\r\nfaxes_nm is a vector containing the axes labels for the figure if the user wants to set up different labels than those contained in faxes.\r\nrange_faxes is a vector with minimum and maximum values of functional axes. To have a fair representation of the position of species in all plots, axes should have the same range. If the user wants the range to be computed according to the range of values among all axes, this argument must be set up to c(NA, NA).\r\ncheck_input is a recurrent argument in the mFD package. It defines whether inputs should be checked before computation or not. Possible error messages will thus be more understandable for the user than R error messages (Recommendation: set it as TRUE)\r\nOthers arguments to set up colors, shapes, sizes and, text fonts are also available. For more information about them, read the function help file.\r\nThen, the function returns each graph for each functional axes combination and also a multipanel plot with all combinations of axes and the graph caption. Here is the multipanel for the fruits exaample:\r\n\r\n\r\nbeta_plot_fruits$\"patchwork\"\r\n\r\n\r\n\r\n\r\nFor each assemblage, the associated convex hull is plotted in a different colour and indices values are printed on the right corner of the plot. Vertices of the convex hull of a given assemblage can be plotted with a different symbol such as in this example. Species of all assemblages are plotted with gray cross and the associated convex hull is plotted in white.\r\n\r\nPart 3. Functional rarity\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-06-08T17:55:30+02:00"
    },
    {
      "path": "resources.html",
      "title": "Resources",
      "author": [],
      "contents": "\r\n\r\nRecommended papers\r\nGrenié M, Denelle P, Tucker CM, Munoz F & Violle C (2017) funrar: An R package to characterize functional rarity. Diversity and Distributions, 23, 1365-1371. DOI: 10.1111/ddi.12629  \r\nMagneville C, Loiseau N, Albouy C, Casajus N, Claverie T, Escalas A, Leprieur F, Maire E, Mouillot D & Villéger S (2022) mFD: an R package to compute and illustrate the multiple facets of functional diversity. Ecography. DOI: 10.1111/ecog.05904  \r\nMaire E, Grenouillet G, Brosse S & Villéger S (2015) Assessing functional space quality. Global Ecology and Biogeography, 24, 728-740. DOI: 10.1111/geb.12299  \r\nMouillot D, Graham NAJ, Villéger S, Mason NWH & Bellwood DR (2013) A functional approach reveals community responses to disturbances. Trends in Ecology & Evolution, 28, 167-177. DOI: 10.1016/j.tree.2012.10.004  \r\nVilléger S, Mason NWH & Mouillot D (2008) New multidimensional functional diversity indices for a multifaceted framework in functional ecology. Ecology, 89, 2290-2301. DOI: 10.1890/07-1206.1  \r\nCorrections\r\nIf you see mistakes or want to suggest changes, please Create an issue on the source repository.\r\nReuse\r\nThe material of this website is licensed under Creative Commons Attribution CC BY 4.0. Source code is available at https://github.com/frbcesab/workshop-free/.\r\nCitation\r\nCasajus N, Grénié M, Magneville C & Villéger S (2022) Workshop FRB-CESAB & FREE Working Group: Functional Rarity and Diversity in Ecology.\r\n\r\n\r\n\r\n",
      "last_modified": "2022-06-08T17:55:32+02:00"
    }
  ],
  "collections": []
}
