{
  "articles": [
    {
      "path": "courses.html",
      "title": "Courses",
      "author": [],
      "contents": "\n\nComing soon…\nCorrections\nIf you see mistakes or want to suggest changes, please Create an\nissue on the source repository.\nReuse\nThe material of this website is licensed under Creative Commons\nAttribution CC BY\n4.0. Source code is available at https://github.com/frbcesab/workshop-free/.\nCitation\nCasajus N, Grénié M, Magneville C & Villéger S (2022) Workshop\nFRB-CESAB & FREE Working Group: Functional Rarity and Diversity in\nEcology.\n\n\n\n",
      "last_modified": "2022-05-31T16:42:21+02:00"
    },
    {
      "path": "index.html",
      "title": "Functional Rarity and Diversity in Ecology",
      "description": "FRB-CESAB & FREE Working Group Workshop",
      "author": [
        {
          "name": "Nicolas Casajus",
          "url": "https://nicolascasajus.fr"
        },
        {
          "name": "Matthias Grénié",
          "url": "https://rekyt.github.io/"
        },
        {
          "name": "Camille Magneville",
          "url": "https://umr-marbec.fr/membre/camille-magneville/"
        },
        {
          "name": "Sébastien Villéger",
          "url": "https://umr-marbec.fr/membre/sebastien-villeger/"
        }
      ],
      "date": "`r format(Sys.Date(), '%m-%d-%Y')`",
      "contents": "\n\n\nThe objective of this workshop, co-organized by the FRB-CESAB\nand the working group FREE\nis to give a general introduction to functional ecology. During the\npractice session, participants will learn to calculate various\nfunctional rarity and diversity index and to map them\n\nProgram\n08:30 – 09:00\n    \n  Welcome coffee and icebreaker\n09:00 – 12:30\n    \n  Introduction to functional ecology (~ 30 min)\n    \n  Type of traits, distance metrics, functional space, etc. (~ 30 min)\n    \n  Practice using the R packages mFD, funrar, and funbiogeo (~ 2h30)\n12:30 – 14:00\n    \n  Lunch break\n14:00 – 18:00\n    \n  Conference - More info here\n\nPrerequisites\nPlease follow this tutorial to\ncorrectly install your working environment (R, RStudio, git, etc.).\nCorrections\nIf you see mistakes or want to suggest changes, please Create an\nissue on the source repository.\nReuse\nThe material of this website is licensed under Creative Commons\nAttribution CC BY\n4.0. Source code is available at https://github.com/frbcesab/workshop-free/.\nCitation\nCasajus N, Grénié M, Magneville C & Villéger S (2022) Workshop\nFRB-CESAB & FREE Working Group: Functional Rarity and Diversity in\nEcology.\n\n\n\n",
      "last_modified": "2022-05-31T16:42:22+02:00"
    },
    {
      "path": "instructions.html",
      "title": "Installation of R, RStudio and git",
      "author": [],
      "contents": "\n\nContents\nInstallation\n\n Windows\n\n macOS\n Ubuntu\n\nConfiguration\ngit\n GitHub\nSSH keys\n GitHub\nPAT\n\nFor the\nworkshop\nCorrections\nReuse\nCitation\n\n\n \nPlease install the latest versions of\n\nRStudio, and git.\n\nInstallation\n\n Windows\nDownload\n\nat:https://cran.r-project.org/\n      \n  Click on Download R for Windows\n      \n  Click on base\n      \n  Click on Download R 4.1.3 for Windows\n      \n  Open R-4.1.3-win.exe and follow instructions\n\nDownload RStudio Desktop at:https://www.rstudio.com/products/rstudio/download/#download\n      \n  Download the version for Windows 10/11 (the .exe and\nnot the .zip)\n      \n  Open RStudio-2022.02.1-461.exe and follow instructions\n      \n  Check if RStudio has found\n.\nLaunch RStudio and run:\n\n\nR.version.string\n## [1] \"R version 4.1.3 (2022-03-10)\"\n\n\n\n\nDownload git at:https://git-scm.com/downloads\n      \n  Download the 64-bit version for Windows\n      \n  Open Git-2.35.1-64-bit.exe and follow instructions\n      \n  Check if RStudio has found\ngit. Launch\nRStudio and run:\n\n\nSys.which(\"git\")\n## C:/Program Files/Git/bin/git.exe\n\n\n\n\nDownload Rtools4.0 at:https://cran.r-project.org/bin/windows/Rtools/rtools40.html\n      \n  Download the 64-bit version for Windows\n      \n  Open rtools40-x86_64.exe and follow instructions\nThe installation of Rtools4.0 is\noptional, but this software is required to install packages (from\nsources) containing compiled code (C/C++/Fortran).\nRtools4.0 contains in particular the\nutility make.\n      \n  Once Rtools4.0 is installed, you need to\ntell\n\nwhere to find Rtools4.0 utilities. Open\nRStudio and run:\n\n\ncat(\"PATH='${RTOOLS40_HOME}\\\\usr\\\\bin;${PATH}'\\r\\n\", file = \"~/.Renviron\", append = TRUE)\n\n\n\nAn hidden file .Renviron has been created (or modified)\nin you personal folder and contains the line\nPATH='${RTOOLS40_HOME}\\usr\\bin;${PATH}' (the path to\nRtools4). At each start\n\nwill read this file.\nRestart RStudio and check that\n\nfind the utility make:\n\n\nSys.which(\"make\")\n## \"C:/rtools40/usr/bin/make.exe\"\n\n\n\nNow you can install packages from sources:\n\n\ninstall.packages(\"jsonlite\", type = \"source\")\n\n\n\n\nInstall pandoc (optional)\nThe package rmarkdown requires the\nsoftware pandoc to convert document from\none format (e.g. .Rmd) to another\n(e.g. .html).\nDownload the latest version of pandoc\nat: https://github.com/jgm/pandoc/releases,\nand follow instructions.\n\nInstall a LaTeX distribution\n(optional)\nIf you want to convert documents from .Rmd to\n.pdf, you will need LaTeX.\nYou can install a lightened distribution using the\n\npackage tinytex.\nOpen RStudio and run:\n\n\n## Install tinytex ----\ninstall.packages(\"tinytex\")\n\n## Install LaTeX ----\ntinytex::install_tinytex()\n\n\n\nN.B. If you already have a\nLaTeX distribution, do not install\ntinytex.\n\n\n macOS\nTh easiest way to set up your environment is by using the package\nmanager for macOS Homebrew. With\nthis tool you can install (and update) your software directly from the\nterminal. First you need to install the Apple software Command Line\nTools for Xcode.\nOpen a terminal,\nrun this line and accept the license:\n## Install Xcode Command Line Tools ----\nsudo xcode-select --install\nThen you can install Homebrew:\n## Install Homebrew ----\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n## Check installation ----\nbrew --version\n## Homebrew 3.4.7\n\n## Update repositories (list of available software) ----\nbrew update\nFollow these lines to install your environment:\n## Install utilities for R ----\nbrew install --cask xquartz     ## Graphical window system\nbrew install gfortran           ## FORTRAN compiler for GCC\n\n## Install R ----\nbrew install --cask r\n\n## Install RStudio Desktop ----\nbrew install --cask rstudio\n\n## Install git ----\nbrew install git\n\n## Install pandoc ----\nbrew install pandoc             ## Convert documents (Rmd, html, etc.)\nOpen RStudio and check your\ninstallation:\n\n\nR.version.string\n## \"R version 4.1.3 (2022-03-10)\"\n\nSys.which(\"git\")\n##            git\n## \"/usr/bin/git\"\n\nSys.which(\"make\")\n##            make \n## \"/usr/bin/make\"\n\nSys.which(\"pandoc\")\n##            pandoc \n## \"/usr/local/bin/pandoc\"\n\n\n\n\nIf you want to convert documents from .Rmd to\n.pdf, you will need LaTeX.\nYou can install a lightened distribution using the\n\npackage tinytex.\nOpen RStudio and run:\n\n\n## Install tinytex ----\ninstall.packages(\"tinytex\")\n\n## Install LaTeX ----\ntinytex::install_tinytex()\n\n\n\n\n\n  Congrats! You have successfully install your environment. The\nfollowing commands will install system libraries (software) required by\nsome\n\npackages (sf, sp, rgdal,\nrgeos, raster, terra,\nxml, etc.).\n## Install other utilities for R (spatial and others) ----\nbrew install libgit2 \nbrew install libxml2 \nbrew install poppler \nbrew install geos gdal netcdf proj udunits\nTo keep your system up-to-date, run regularly:\n## Update environment ----\nbrew update && brew upgrade --greedy\n\n Ubuntu\nFirst check your version of Ubuntu in a terminal:\n## Check Ubuntu version ----\ncat /etc/issue\n## Ubuntu 20.04 LTS\n\nTable 1. List of CRAN repositories for different versions of\nUbuntu\nRelease\nRelease name\nRepository URL\n22.04 LTS\nJammy Jellyfish\nhttps://cloud.r-project.org/bin/linux/ubuntu\njammy-cran40/\n21.10\nImpish Indri\nhttps://cloud.r-project.org/bin/linux/ubuntu\nimpish-cran40/\n21.04\nHirsute Hippo\nhttps://cloud.r-project.org/bin/linux/ubuntu\nhirsute-cran40/\n20.04 LTS\nFocal Fossa\nhttps://cloud.r-project.org/bin/linux/ubuntu\nfocal-cran40/\n18.04 LTS\nBionic Beaver\nhttps://cloud.r-project.org/bin/linux/ubuntu\nbionic-cran40/\n16.04 LTS\nXenial Xerus\nhttps://cloud.r-project.org/bin/linux/ubuntu\nxenial-cran40/\n\nInstall\n\nby following these steps (change the URL below by the one specific to\nyour version of Ubuntu, cf. Table 1) :\n## Install APT utilities ----\nsudo apt install software-properties-common\n\n## Add CRAN GPG key ----\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9\n\n## Add CRAN repository to APT repositories list ----\nsudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/'\n\n## Update packages list ----\nsudo apt update\n\n## Install R ----\nsudo apt install r-base\n\n## Install R (for development, recommended) ----\nsudo apt install build-essential\nsudo apt install r-base-dev\n\nTo install RStudio Desktop visit this\npage: https://www.rstudio.com/products/rstudio/download/#download,\ndownload the .deb file for Ubuntu 18+/Debian 10+ and\ninstall it. If you have an older version of Ubuntu (16.04), visit this\npage: https://www.rstudio.com/products/rstudio/older-versions/\nAlternatively, you can install\nRStudio Desktop from the terminal:\n## Install wget utility ----\nsudo apt install wget\n\n## Download RStudio Desktop installer (Ubuntu >= 18.04) ----\nwget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-2022.02.1-461-amd64.deb\n\n## Download RStudio Desktop installer (Ubuntu 16.04 only) ----\n# wget https://download1.rstudio.org/desktop/xenial/amd64/rstudio-1.4.1106-amd64.deb\n\n## Install RStudio Desktop ----\nsudo dpkg -i rstudio-2022.02.1-461-amd64.deb\n# sudo dpkg -i rstudio-1.4.1106-amd64.deb\n\n## Remove installer ----\nrm rstudio-2022.02.1-461-amd64.deb\n# rm rstudio-1.4.1106-amd64.deb\n\nNow let’s install git:\nsudo apt install git\nFinally, install pandoc (to convert\ndocuments using rmarkdown):\nsudo apt install pandoc\n\nOpen RStudio and check your\ninstallation:\n\n\nR.version.string\n## \"R version 4.1.3 (2022-03-10)\"\n\nSys.which(\"git\")\n##            git\n## \"/usr/bin/git\"\n\nSys.which(\"make\")\n##            make \n## \"/usr/bin/make\"\n\nSys.which(\"pandoc\")\n##            pandoc \n## \"/usr/bin/pandoc\"\n\n\n\n\nIf you want to convert documents from .Rmd to\n.pdf, you will need LaTeX.\nYou can install a lightened distribution using the\n\npackage tinytex.\nOpen RStudio and run:\n\n\n## Install tinytex ----\ninstall.packages(\"tinytex\")\n\n## Install LaTeX ----\ntinytex::install_tinytex()\n\n\n\n\n\n  Congrats! You have successfully install your environment. The\nfollowing commands will install system libraries (software) required by\nsome\n\npackages (sf, sp, rgdal,\nrgeos, raster, terra,\nxml, etc.).\n## Install other utilities for R (spatial and others) ----\nsudo apt install libgdal-dev libproj-dev libgeos-dev libudunits2-dev libnetcdf-dev\nsudo apt install libcairo2-dev libmagick++-dev\nsudo apt install libpoppler-cpp-dev\nTo keep your system up-to-date, do not forget to frequently run:\n## Update system ----\nsudo apt update && sudo apt upgrade\n\nConfiguration\ngit\nTo use git, you need to store your\ncredentials (user name and email) that will be added to all your\ncommits. Open a terminal (you can use the terminal of\nRStudio) and run:\ngit config --global user.name  \"Jane Doe\"\ngit config --global user.email \"jane.doe@mail.com\"\nWhen you create a new git project the default branch will be named\nmaster. It’s recommended to replace master by\nmain (for more information read this article).\nOn a terminal, run:\ngit config --global init.defaultBranch \"main\"\nFrom now when you will initialize git in a new project\nthe default branch will be main.\n\n GitHub\nSSH keys\nTo communicate with GitHub, you can\nuse the protocol HTTPS (default) or the protocol SSH (recommended). The\nprotocol SSH is a more secure method of logging into a remote server\n(GitHub). To use this protocol, you need to generate an SSH keys pair\nthat consists in creating two long strings of characters: a\npublic key and a private key. You can\nplace the public key on any server (for instance GitHub), and then\nconnect to the server using a device (your laptop) that has access to\nthe private key.\nTo generate a new SSH keys pair proceed as follow:\n  \n  Create an account on GitHub at https://github.com/signup (if not\nalready done)\n  \n  Open RStudio and click on:\nTools > Global options > Git/SVN\n  \n  Click on Create RSA Key and then click on\nCreate (you can omit the passphrase). This new SSH keys\npair has been stored in ~/.ssh/.\n  \n  Click on View public key and copy it\n  \n  Go to the page https://github.com/settings/keys\nand click on New SSH key\n  \n  Choose a name for your key (e.g. your laptop name) and paste your\npublic key\n  \n  Finally click on Add SSH key\n\n\n  If you are on Ubuntu you need to install the following utility:\nsudo apt install ssh-askpass\n\nLet’s test the SSH connection to GitHub. Open a terminal and run (you\nneed to accept the fingerprint, just enter yes):\nssh -T git@github.com\nCongrats! You can now communicate with GitHub using the SSH\nprotocol.\n\n\n  From now, you need to use the SSH URL when connecting a new GitHub\nproject (named remote).\n## URL HTTPS ----\nhttps://github.com/frbcesab/workshop-free.git\n\n## URL SSH (use this one) ----\ngit@github.com:frbcesab/workshop-free.git\n\n\n  If you lose your private SSH key you won’t be able to establish a\nconnection with GitHub. You’ll need to delete your SSH key on GitHub and\nto create a new one.\n\n GitHub\nPAT\nIf you want to use the GitHub API, essentially with the\n\npackage usethis,\nyou need to create a GitHub Personal Access Token (PAT).\nGo to https://github.com/settings/tokens\n  \n  Click on Generate new token\n  \n  Choose a name for your new token (e.g. your laptop name)\n  \n  In the section scopes, select at least repo\nand workflow\n  \n  Copy this token.\nThen open RStudio and run:\n\n\n## Install usethis package ----\ninstall.packages(\"usethis\")\n\n## Open ~/.Renviron file ----\nusethis::edit_r_environ()\n## • Modify '~/.Renviron'\n## • Restart R for changes to take effect\n\n\n\nIn the ~/.Renviron file, add this new line:\nGITHUB_PAT='XXX' where XXX is your token. Do\nnot forget to restart\n.\n\nFinally let’s tell usethis to use the SSH protocol. Open\nRStudio and run:\n\n\n## Open ~/.Rprofile file ----\nusethis::edit_r_profile()\n## • Modify '~/.Rprofile'\n## • Restart R for changes to take effect\n\n\n\nIn the ~/.Rprofile file, add this new line:\noptions(usethis.protocol = \"ssh\"). Do not forget to restart\n.\n\nFor the workshop\nYou will need to install the following R packages:\n\n\n## CRAN packages ----\npkgs <- c(\"funrar\", \"mFD\", \"remotes\", \"sf\", \"terra\")\ninstall.packages(pkgs)\n\n## GitHub packages ----\nremotes::install_github(\"frbcesab/funbiogeo\")\n\n\n\n\nIn addition, you must download a copy of the content of the workshop.\nWe recommend that you create a copy (fork) of the GitHub repository of\nthe workshop on your GitHub space. Then, using RStudio you will clone\n(download) your fork.\nGo to the GitHub URL of the workshop repository: https://github.com/frbcesab/workshop-free. Then follow\nthese instructions to fork the repository.\n\n Fork the repository (1)\n Fork the repository (2)\n Get the SSH URL of your fork (1)\n Get the SSH URL of your fork (2)Then open RStudio Desktop and follow these\ninstructions to create a new project from your GitHub repository (fork\nof the original repository)\n\n Clone your fork (1)\n Clone your fork (2)\n Clone your fork (3)Congrats! You have your own copy of the workshop content (data,\ninstructions and courses). If you want you can use\ngit to commit changes during the workshop\nand send these modifications to your GitHub repository.\nCorrections\nIf you see mistakes or want to suggest changes, please Create an\nissue on the source repository.\nReuse\nThe material of this website is licensed under Creative Commons\nAttribution CC BY\n4.0. Source code is available at https://github.com/frbcesab/workshop-free/.\nCitation\nCasajus N, Grénié M, Magneville C & Villéger S (2022) Workshop\nFRB-CESAB & FREE Working Group: Functional Rarity and Diversity in\nEcology.\n\n\n\n",
      "last_modified": "2022-05-31T16:42:24+02:00"
    },
    {
      "path": "practice.html",
      "title": "Practice",
      "author": [],
      "contents": "\n\nContents\nAbout\nPrerequisites\nData\ndescription\nQuestions\nPart 1.\nBuild a functional space using the mFD package\n1.0. Compute summaries about\nyour data\n1.1.\nWhat about the traits?\n1.2.\nComputing distances between species based on functional traits\n1.3.\nBuilding functional spaces and chosing the best one\n1.3.1.\nComputing several multimensional functional spaces and assessing their\nquality\n1.3.2.\nIllustrating the quality of the functional spaces\n1.3.3.\nTesting the correlation between functional axes and traits\n\n1.4.\nPlotting the selected functional space and position of species\n\nPart\n2. Computing and plotting FD indices using the mFD\npackage\n2.1. Computing and\nplotting alpha FD indices\n2.2. Computing and\nplotting beta FD indices\n\nPart 3. Functional rarity\n\nAbout\n\nThis tutorial describes the basic workflow showing how to compute\nstep by step functional diversity (FD) indices in a multidimensional\nspace. It is divided in four parts:\nComputing trait-based distances and the multidimensional functional\nspace\nUsing the mFD package\nto compute FD alpha and beta indices and plot them (Magneville et al.\n2021)\nUsing the funrar package\nto compute Functional Rarity indices (Violle et al.\n2017)\nUsing the funbiogeo\npackage to compute analyses in functional biogeography (Violle et al.\n2014)\n\nN.B. You can chose to do Part 2, Part 3 and Part 4\nin the order that you want but Part 1 has to be realized first.\n\nPrerequisites\nBe sure you have followed the instructions\nto set up your system (e.g. R version >= 3.5).\nIf not already done, please install the following R packages:\n\n\n## CRAN packages ----\npkgs <- c(\"funrar\", \"mFD\", \"remotes\", \"sf\", \"terra\")\ninstall.packages(pkgs)\n\n## GitHub packages ----\nremotes::install_github(\"frbcesab/funbiogeo\")\n\n\n\n\nData description\nThe dataset used as study case all along this workshop is the\nFruits dataset based on 25 types of fruits\n(i.e. species) distributed in 10 fruits baskets (i.e. assemblages). Each\nfruit is characterized by five traits values summarized in the following\ntable:\n\nTrait name\nTrait measurement\nTrait type\nNumber of classes\nClasses code\nUnit\nSize\nMaximal diameter\nOrdinal\n5\n0-1 ; 1-3 ; 3-5 ; 5-10 ; 10-20\ncm\nPlant\nGrowth form\nCategorical\n4\ntree ; shrub ; vine ; forb\nNA\nClimate\nClimatic niche\nOrdinal\n3\ntemperate ; subtropical ; tropical\nNA\nSeed\nSeed type\nOrdinal\n3\nnone ; pip ; pit\nNA\nSugar\nSugar\nContinuous\nNA\nNA\ng/kg\n\nThe use of the mFD and funrar packages is\nbased on two datasets:\na data.frame summarizing traits values\nfor each species called fruits_traits in this tutorial\nCode\n\n\n## Loading data ----\ndata(\"fruits_traits\", package = \"mFD\")\n\n## Removing fuzzy traits in this tutorial ----\nfruits_traits <- fruits_traits[ , -c(6:8)]\n\n## Display the table ----\nknitr::kable(head(fruits_traits),\n             caption = \"Species x traits data.frame\")\n\n\nTable 1: Species x traits data.frame\n\nSize\nPlant\nClimate\nSeed\nSugar\napple\n5-10cm\ntree\ntemperate\npip\n103.9\napricot\n3-5cm\ntree\ntemperate\npit\n92.4\nbanana\n10-20cm\ntree\ntropical\nnone\n122.3\ncurrant\n0-1cm\nshrub\ntemperate\npip\n73.7\nblackberry\n1-3cm\nshrub\ntemperate\npip\n48.8\nblueberry\n0-1cm\nforb\ntemperate\npip\n100.0\n\n\na matrix summarizing species\nassemblages called baskets_fruits_weights in this tutorial.\nWeights in this matrix can be occurrence data, abundance, biomass,\ncoverage, etc. The studied example works with biomass (i.e.\ngrams of a fruit in a basket) and this matrix looks as follows:\nCode\n\n\n## Loading data ----\ndata(\"baskets_fruits_weights\", package = \"mFD\")\n\n## Display the table ----\nknitr::kable(as.data.frame(baskets_fruits_weights[1:6, 1:6]), \n             centering = TRUE,\n             caption = \"Species x assemblages matrix based on the **fruits** dataset\")\n\n\nTable 2: Species x assemblages matrix based on the\nfruits dataset\n\napple\napricot\nbanana\ncurrant\nblackberry\nblueberry\nbasket_1\n400\n0\n100\n0\n0\n0\nbasket_2\n200\n0\n400\n0\n0\n0\nbasket_3\n200\n0\n500\n0\n0\n0\nbasket_4\n300\n0\n0\n0\n0\n0\nbasket_5\n200\n0\n0\n0\n0\n0\nbasket_6\n100\n0\n200\n0\n0\n0\n\nQuestions\nUsing this Practice, we ask the following questions:\nHow different are the fruits baskets based on their functional\ntraits?\n{{ Question functional rarity }}\n{{ Question funbiogeo }}\nTo answer these three questions, the first step is to build a\nfunctional space based on species traits on which functional\ndiversity and functional rarity indices will be then computed.\n\nPart 1.\nBuild a functional space using the mFD package\n\n1.0. Compute summaries about\nyour data\n\nThis part is not developed in this Practice (not enough time to see\neverything ;) ), but it could be useful to know that the\nmFD package can compute summaries about your traits or\nassemblage data. For instance, you can compute a matrix of species\noccurrence in each assemblage (needed in 2.2).\n\n\n## Summary of the assemblages * species data.frame ----\nasb_sp_fruits_summ <- mFD::asb.sp.summary(asb_sp_w = baskets_fruits_weights)\nasb_sp_fruits_occ  <- asb_sp_fruits_summ$\"asb_sp_occ\"\n\nhead(asb_sp_fruits_occ)\n\n\n         apple apricot banana currant blackberry blueberry cherry\nbasket_1     1       0      1       0          0         0      1\nbasket_2     1       0      1       0          0         0      1\nbasket_3     1       0      1       0          0         0      1\nbasket_4     1       0      0       0          0         0      0\nbasket_5     1       0      0       0          0         0      0\nbasket_6     1       0      1       0          0         0      0\n         grape grapefruit kiwifruit lemon lime litchi mango melon\nbasket_1     0          0         0     1    0      0     0     1\nbasket_2     0          0         0     1    0      0     0     1\nbasket_3     0          0         0     1    0      0     0     1\nbasket_4     0          0         1     1    0      0     0     0\nbasket_5     0          0         1     1    0      0     0     0\nbasket_6     0          0         0     0    1      1     1     0\n         orange passion_fruit peach pear pineapple plum raspberry\nbasket_1      0             1     0    1         0    0         0\nbasket_2      0             1     0    1         0    0         0\nbasket_3      0             1     0    1         0    0         0\nbasket_4      1             0     1    1         0    1         0\nbasket_5      1             0     1    1         0    1         0\nbasket_6      1             0     0    0         1    0         0\n         strawberry tangerine water_melon\nbasket_1          1         0           0\nbasket_2          1         0           0\nbasket_3          1         0           0\nbasket_4          0         1           0\nbasket_5          0         1           0\nbasket_6          0         0           1\n\n\n1.1. What about the traits?\n\nThe first thing to do before starting analyses is to know your data.\nTo do so, you must be able to characterize the traits you are using\n(i.e. tell the package what type of traits you are using). That\nis why mFD package needs a data.frame\nsummarizing the type of each trait (i.e. each column of the\nfruits_traits data.frame).\nCode\n\n\n## Loading data ----\ndata(\"fruits_traits_cat\", package = \"mFD\")\n\n## Removing fuzzy traits in this tutorial ----\nfruits_traits_cat <- fruits_traits_cat[-c(6:8), ]\n\n## Thus remove the \"fuzzy_name\" column ----\nfruits_traits_cat <- fruits_traits_cat[ , -3]\n\n## Displaying the table ----\nknitr::kable(head(fruits_traits_cat), \n             caption = \"Traits types based on **fruits & baskets** dataset\")\n\n\nTable 3: Traits types based on fruits\n& baskets dataset\ntrait_name\ntrait_type\nSize\nO\nPlant\nN\nClimate\nO\nSeed\nO\nSugar\nQ\n\nThe first column contains traits\nname. The second column contains\ntraits type following this code:\nN: nominal trait (factor variable)\nO: ordinal traits (ordered variable)\nC: circular traits (integer values)\n(N.B. circular traits can not be used in\nmFD function used to compute functional distance but ok for\nsummary function and function to group species into Functional\nEntities)\nQ: quantitative traits (numeric values)\nF: fuzzy traits (described with several values\ndefined in several columns in the fruits_traits\ndata.frame)\n\n1.2.\nComputing distances between species based on functional traits\n\nThe next step toward the computation of functional diversity indices\nis to estimate functional traits-based distances between species in\norder to build the functional space in which indices will be\ncomputed.\nTo compute trait-based distances, we will use the\nmFD::funct.dist() function which includes the following\narguments:\nCode\n\n\nsp_dist_fruits <- mFD::funct.dist(\n  sp_tr         = fruits_traits,\n  tr_cat        = fruits_traits_cat,\n  metric        = \"gower\",\n  scale_euclid  = \"scale_center\",\n  ordinal_var   = \"classic\",\n  weight_type   = \"equal\",\n  stop_if_NA    = TRUE)\n\n\n\nsp_tr is the species x trait\ndata.frame\ntr_cat is the data.frame summarizing\ntrait type for each trait\nmetric is a character string referring to the metric\nused to compute distances. Two metrics are available and the\nchoice depends on your traits data:\nif all traits are continuous use the\nEuclidean distance (metric = \"euclidean\")\nand check the Compute\nFunctional Diversity Indices based on Only Continuous Traits\ntutorial which explains how to build a multidimensional space from\ntraits through PCA analysis or considering directly each trait as a\ndimension.\nif you have non-continuous traits use the\nGower distance (metric = \"gower\") as this\nmethod allows traits weighting. This method can also deal with fuzzy\ntraits.\n\nscale_euclid is a character string referring to the\nway the user wants to scale euclidean traits. You can\neither chose to scale by range (range), use the center\ntransformation (center), use the scale transformation\n(scale), use the scale-center transformation\n(scale_center) or you can chose not to scale\n(noscale).\nordinal_var is a character string specifying the\nmethod to be used for ordinal variables (i.e. ordered). You can\neither chose to treat ordinal variables as continuous variables (with\n\"classic\" option) or to treat ordinal variables as ranks\n(with metric or podani options, see\nmFD::funct.dist() help file for detail).\nweight_type is a character string referring to the\ntype of method to weight traits. You can either chose to define weights\nusing the tr_cat data.frame (cf. step\n1.1) (user option) or you can chose to give the\nsame weight to all traits (equal option).\n(N.B. Using mFD, you can not define\nweights for fuzzy traits, use gawdis\npackage instead)\nstop_if_NA is a logical value to stop or not the\nprocess if the sp_tr data.frame contains\nNA. If the sp_tr data.frame\ncontains NA you can either chose to compute anyway\nfunctional distances (but keep in mind that Functional measures\nare sensitive to missing traits!) or you can delete species\nwith missing or extrapolate missing traits (see Johnson\net al. (2020)).\nThis function returns a dist object with traits-based\ndistances between all pairs of species:\nCode\n\n\n## Output of the function mFD::funct.dist() ----\nround(sp_dist_fruits, 3)\n\n\n              apple apricot banana currant blackberry blueberry\napricot       0.166                                            \nbanana        0.375   0.541                                    \ncurrant       0.391   0.426  0.767                             \nblackberry    0.376   0.410  0.751   0.084                     \nblueberry     0.355   0.410  0.731   0.236      0.320          \ncherry        0.233   0.099  0.558   0.425      0.409     0.389\ngrape         0.380   0.446  0.705   0.372      0.356     0.336\ngrapefruit    0.192   0.327  0.268   0.501      0.483     0.537\nkiwifruit     0.219   0.353  0.595   0.372      0.356     0.364\nlemon         0.208   0.343  0.384   0.517      0.433     0.553\nlime          0.370   0.404  0.345   0.578      0.494     0.614\nlitchi        0.466   0.332  0.391   0.658      0.642     0.622\nmango         0.395   0.361  0.220   0.786      0.771     0.750\nmelon         0.285   0.419  0.560   0.407      0.391     0.229\norange        0.117   0.251  0.292   0.474      0.459     0.462\npassion_fruit 0.461   0.527  0.414   0.553      0.537     0.516\npeach         0.127   0.062  0.503   0.464      0.448     0.472\npear          0.009   0.157  0.384   0.383      0.367     0.353\npineapple     0.557   0.708  0.233   0.734      0.718     0.502\nplum          0.156   0.009  0.532   0.435      0.419     0.401\nraspberry     0.382   0.416  0.758   0.091      0.007     0.327\nstrawberry    0.376   0.410  0.751   0.284      0.200     0.120\ntangerine     0.153   0.218  0.323   0.444      0.428     0.408\nwater_melon   0.281   0.415  0.556   0.410      0.395     0.226\n              cherry grape grapefruit kiwifruit lemon  lime litchi\napricot                                                           \nbanana                                                            \ncurrant                                                           \nblackberry                                                        \nblueberry                                                         \ncherry                                                            \ngrape          0.347                                              \ngrapefruit     0.426 0.573                                        \nkiwifruit      0.453 0.200      0.373                             \nlemon          0.442 0.589      0.116     0.389                   \nlime           0.503 0.650      0.277     0.550 0.161             \nlitchi         0.233 0.514      0.459     0.686 0.475 0.336       \nmango          0.362 0.686      0.287     0.614 0.403 0.364  0.172\nmelon          0.518 0.465      0.308     0.266 0.424 0.585  0.751\norange         0.351 0.498      0.075     0.302 0.091 0.252  0.384\npassion_fruit  0.572 0.319      0.453     0.280 0.470 0.331  0.405\npeach          0.161 0.508      0.265     0.308 0.281 0.442  0.394\npear           0.242 0.389      0.184     0.210 0.200 0.361  0.475\npineapple      0.791 0.738      0.435     0.562 0.551 0.512  0.624\nplum           0.090 0.437      0.336     0.363 0.352 0.413  0.323\nraspberry      0.416 0.363      0.490     0.363 0.426 0.487  0.649\nstrawberry     0.409 0.356      0.483     0.356 0.433 0.494  0.642\ntangerine      0.281 0.428      0.145     0.372 0.161 0.222  0.314\nwater_melon    0.515 0.462      0.311     0.262 0.427 0.588  0.748\n              mango melon orange passion_fruit peach  pear pineapple\napricot                                                             \nbanana                                                              \ncurrant                                                             \nblackberry                                                          \nblueberry                                                           \ncherry                                                              \ngrape                                                               \ngrapefruit                                                          \nkiwifruit                                                           \nlemon                                                               \nlime                                                                \nlitchi                                                              \nmango                                                               \nmelon         0.580                                                 \norange        0.312 0.368                                           \npassion_fruit 0.434 0.546  0.378                                    \npeach         0.322 0.357  0.210         0.589                      \npear          0.404 0.276  0.108         0.470 0.119                \npineapple     0.452 0.327  0.460         0.419 0.670 0.551          \nplum          0.351 0.428  0.261         0.518 0.071 0.152     0.701\nraspberry     0.777 0.398  0.465         0.543 0.455 0.373     0.725\nstrawberry    0.770 0.191  0.458         0.537 0.448 0.367     0.518\ntangerine     0.342 0.437  0.070         0.309 0.280 0.161     0.510\nwater_melon   0.576 0.004  0.364         0.542 0.354 0.272     0.324\n               plum raspberry strawberry tangerine\napricot                                           \nbanana                                            \ncurrant                                           \nblackberry                                        \nblueberry                                         \ncherry                                            \ngrape                                             \ngrapefruit                                        \nkiwifruit                                         \nlemon                                             \nlime                                              \nlitchi                                            \nmango                                             \nmelon                                             \norange                                            \npassion_fruit                                     \npeach                                             \npear                                              \npineapple                                         \nplum                                              \nraspberry     0.426                               \nstrawberry    0.419     0.207                     \ntangerine     0.209     0.435      0.428          \nwater_melon   0.425     0.401      0.194     0.434\n\n\n1.3.\nBuilding functional spaces and chosing the best one\n\n1.3.1.\nComputing several multimensional functional spaces and assessing their\nquality\n\nIn order to generate a multidimensional space in which functional\ndiversity indices are computed (Mouillot\net al. 2013, we will perform a PCoA using the trait-based\ndistances (and if required a functional dendrogram). mFD\nevaluates the quality of PCoA-based multidimensional spaces according to\nthe deviation between trait-based distances and distances in the\nfunctional space (extension of Maire\net al. (2015) framework). For that, we will use the\nmFD::quality.fspaces() function:\n\nCode\n\n\nfspaces_quality_fruits <- mFD::quality.fspaces(\n  sp_dist             = sp_dist_fruits,\n  maxdim_pcoa         = 10,\n  deviation_weighting = \"absolute\",\n  fdist_scaling       = FALSE,\n  fdendro             = \"average\")\n\n\n\nsp_dist is the dist object with\npairwise trait-based distance between species as computed in\nstep 1.2\nmaxdim_pcoa is the maximum number of PCoA axes to\nconsider to build multidimensional spaces. Actually, the maximum number\nof dimensions considered depends on the number of PCoA axes with\npositive eigenvalues.\ndeviation_weighting refers to the method(s) used to\nweight the difference between species pairwise distances in the\nfunctional space and trait-based distances. You can chose\nbetween:\nabsolute: absolute differences are used to compute the\nmean absolute deviation (mad) . It reflects the actual\nmagnitude of errors that will affect FD metrics.\nsquared: squared differences are used to compute the\nroot of mean square deviation (rmsd). This weighting\nputs more weight to the large deviations between trait-based distances\nand distances in the functional space.\nBoth quality metrics can be used with:\ndeviation_weighting = c(\"absolute\", \"squared\").\n\nfdist_scaling specifies whether distances in the\nfunctional space should be scaled before computing differences with\ntrait-based distances. Scaling ensures that trait-based distances and\ndistances in the functional space have the same maximum. Scaling\ndistances implies that the quality of the functional space accounts for\ncongruence in distances rather than their equality.\nN.B. The combination of\ndeviation_weighting and fdist_scaling\narguments leads to four possible quality metrics:\nmad, rmsd, mad_scaled and\nrmsd_scaled\nfdendro specifies the clustering algorithm to compute a\nfunctional dendrogram. NULL means no dendrogram computed.\nThe chosen algorithm must be one of the method recognized by the\nstats::hclust() function from the stats\npackage.\nThis function returns a list various objects:\n\na data.frame gathering for each space (in rows), values\nof quality metric(s) (in columns)\nCode\n\n\n## Quality metrics of functional spaces ----\nround(fspaces_quality_fruits$\"quality_fspaces\", 3)\n\n\n               mad\npcoa_1d      0.150\npcoa_2d      0.073\npcoa_3d      0.047\npcoa_4d      0.040\npcoa_5d      0.049\npcoa_6d      0.055\npcoa_7d      0.060\npcoa_8d      0.064\npcoa_9d      0.065\npcoa_10d     0.065\ntree_average 0.082\n\n\nlist with details required for other tasks in\nstep 1.4 to plot functional space quality and in\nstep 1.5 to plot functional space.\n\nN.B. The space with the best quality has the lowest\nquality metric. Here, thanks to mad values, we can see that the 4D space\nis the best one. That is why the following of this Practice will use\nthis multidimensional space.\n\n1.3.2.\nIllustrating the quality of the functional spaces\n\nWith the mFD package, it is possible to illustrate the\nquality of PCoA-based multidimensional spaces according to deviation\nbetween trait-based distances and distances in the functional space. For\nthat, we use the mFD::quality.fspace.plot() function with\nthe following arguments:\n\nCode\n\n\nmFD::quality.fspaces.plot(\n  fspaces_quality            = fspaces_quality_fruits,\n  quality_metric             = \"mad\",\n  fspaces_plot               = c(\"tree_average\", \"pcoa_2d\", \"pcoa_3d\", \n                                 \"pcoa_4d\", \"pcoa_5d\", \"pcoa_6d\"),\n  name_file                  = NULL,\n  range_dist                 = NULL,\n  range_dev                  = NULL,\n  range_qdev                 = NULL,\n  gradient_deviation         = c(neg = \"darkblue\", nul = \"grey80\", pos = \"darkred\"),\n  gradient_deviation_quality = c(low = \"yellow\", high = \"red\"),\n  x_lab                      = \"Trait-based distance\")\n\n\n\nfspaces_quality is the output of the\nmFD::quality.fspaces() function (step\n1.3.1).\nquality_metric refers to the quality metric used. It\nshould be one of the column name(s) of the table gathering quality\nmetric values (output of mFD::quality.fspaces() called\nquality_fspaces) (here:\nfspaces_quality_fruits$quality_fspaces) Thus it can be:\nmad, rmsd, mad_scaled or\nrmsd_scaled (see step 1.3.1)\nfspaces_plot refers to the names of spaces for which\nquality has to be illustrated (up to 10). Names are those used in the\noutput of mFD::quality.fspaces() function showing the\nvalues of the quality metric.\nname_file refers to the name of file to save\n(without extension) if the user wants to save the figure. If the user\nonly wants the plot to be displayed, then\nname_file = NULL.\nrange_dist, range_dev,\nrange_qdev are arguments to set ranges of panel axes (check\nfunction help for further information).\ngradient_deviation and\ngradient_deviation_quality are arguments to set points\ncolors (check function help for further information).\nxlab is a parameter to set x-axis label.\n\nThis function generates a figure with three panels (in rows) for each\nselected functional space (in columns). Each column represents a\nfunctional space, the value of the quality metric is written on the top\nof each column. The x-axis of all panels represents trait-based\ndistances. The y-axis is different for each row:\non the first (top) row, the y-axis represents species functional\ndistances in the multidimensional space. Thus, the closer species are to\nthe 1:1 line, the better distances in the functional space fit\ntrait-based ones.\non the second row, the y-axis shows the raw deviation of species\ndistances in the functional space compared to trait-based distances.\nThus, the raw deviation reflects the distance to the 1:1 line.\non the third row (bottom), the y-axis shows the absolute or squared\ndeviation of the (“scaled”) distance in the functional space. It is the\ndeviation that is taken into account for computing the quality\nmetric.\nCode\n\n\nmFD::quality.fspaces.plot(\n  fspaces_quality            = fspaces_quality_fruits,\n  quality_metric             = \"mad\",\n  fspaces_plot               = c(\"tree_average\", \"pcoa_2d\", \"pcoa_3d\",\n                                 \"pcoa_4d\", \"pcoa_5d\", \"pcoa_6d\"),\n  name_file                  = NULL,\n  range_dist                 = NULL,\n  range_dev                  = NULL,\n  range_qdev                 = NULL,\n  gradient_deviation         = c(neg = \"darkblue\", nul = \"grey80\", pos = \"darkred\"),\n  gradient_deviation_quality = c(low = \"yellow\", high = \"red\"),\n  x_lab                      = \"Trait-based distance\")\n\n\n\n\n\nFor the 2D space, on the top row there are a lot of points below the\n1:1 lines, meaning that distances are overestimated in this\nmultidimensional space. Looking at panels, we can see that the 4D space\nis the one in which points are the closest to the 1:1 line on the top\nrow,and the closest to the x-axis for the two bottom rows, which\nreflects a better quality compared to other functional spaces /\ndendrogram. For the dendrogram, we can see on the top row that species\npairs arrange in horizontal lines, meaning that different trait-based\ndistances have then the same cophenetic distance on the dendrogram.\n\n1.3.3.\nTesting the correlation between functional axes and traits\n\nmFD allows to test for correlations between traits and\nfunctional axes and then illustrate possible correlations (continuous\ntraits = linear model is computed and r2 and associated\np-value are returned; non-continuous traits = Kruskal-Wallis test is\ncomputed and eta2 statistic is returned). The function\nmFD::traits.faxes.cor() allows to test and plot correlation\nand needs the following arguments:\nsp_tr is the species x traits\ndata.frame\nsp_faxes_coord is a matrix of species\ncoordinates taken from the outputs of the\nmFD::quality.fspaces() function with columns\nrepresenting axes on which functional space must be computed.\nFor instance, in this tutorial, we will plot the functional space for 4\nand 10 dimensions (cf. the two examples below). The whole\nsp_faxes_coord can be retrieved through the output of the\nmFD::quality.fspaces() function:\nCode\n\n\nsp_faxes_coord_fruits <- fspaces_quality_fruits$\"details_fspaces\"$\"sp_pc_coord\"\n\n\n\nplot is a logical value indicating whether correlations\nshould be illustrated or not. If this option is set to\nTRUE, traits-axis relationships are plotted through\nscatterplot for continuous traits and boxplot for non-continuous\ntraits.\nThe function mFD::traits.faxes.cor() works as\nfollows:\n\nCode\n\n\nfruits_tr_faxes <- mFD::traits.faxes.cor(\n  sp_tr          = fruits_traits, \n  sp_faxes_coord = sp_faxes_coord_fruits[ , c(\"PC1\", \"PC2\", \"PC3\", \"PC4\")], \n  plot           = TRUE)\n\n\n\nWe can print only traits with significant effect on position along\none of the axis and look at the plots:\nCode\n\n\n## Print traits with significant effect ----\nfruits_tr_faxes$\"tr_faxes_stat\"[which(fruits_tr_faxes$\"tr_faxes_stat\"$\"p.value\" < 0.05), ]\n\n\n     trait axis           test stat value p.value\n1     Size  PC1 Kruskal-Wallis eta2 0.308  0.0377\n3     Size  PC3 Kruskal-Wallis eta2 0.326  0.0325\n5    Plant  PC1 Kruskal-Wallis eta2 0.471  0.0049\n6    Plant  PC2 Kruskal-Wallis eta2 0.382  0.0116\n8    Plant  PC4 Kruskal-Wallis eta2 0.264  0.0360\n9  Climate  PC1 Kruskal-Wallis eta2 0.731  0.0001\n13    Seed  PC1 Kruskal-Wallis eta2 0.201  0.0402\n14    Seed  PC2 Kruskal-Wallis eta2 0.593  0.0005\n20   Sugar  PC4   Linear Model   r2 0.682  0.0000\n\n## Plot ----\nfruits_tr_faxes$\"tr_faxes_plot\"\n\n\n\n\n\nWe can thus see that PC1 is mostly driven by\nClimate (temperate on the left and tropical on the right) and\nPlant Type (forb & shrub on the left vs tree & vine on\nthe right) and Size (large fruits on the right) with weaker\ninfluence of Seed (eta2 < 0.25). Then, PC2\nis mostly driven by Seed (no seed on the left and pit seed on\nthe right) with weaker influence of Plant Type.\nPC3 is driven by only one trait, Size. And\nfinally PC4 is mostly driven by Sugar (high\nsugar content on the right and low sugar content on the left) with a\nweaker influence of Plant Type.\n\n1.4.\nPlotting the selected functional space and position of species\n\nOnce the user has selected the dimensionality of the functional\nspace, mFD allows you to plot the given multidimensional\nfunctional space and the position of species in all 2-dimensions spaces\nmade by pairs of axes.\n\nThe mFD::funct.space.plot() function allows to\nillustrate the position of all species along pairs of space axes.\n\nThis function allows to plot with many possibilities to change\ncolors/shapes of each plotted element. Here are listed the main\narguments:\nsp_faxes_coord is a matrix of species\ncoordinates taken from the outputs of the\nmFD::quality.fspaces() function with columns\nrepresenting axes on which functional space must be computed.\nFor instance, in this tutorial, we will plot the functional space for 4\nand 10 dimensions (cf. the two examples below). The whole\nsp_faxes_coord can be retrieved through the output of the\nmFD::quality.fspaces() function:\n\nCode\n\n\nsp_faxes_coord_fruits <- fspaces_quality_fruits$\"details_fspaces\"$\"sp_pc_coord\"\n\n\n\n\nfaxes is a vector containing names of\naxes to plot. If set to NULL, the first four functional\naxes will be plotted.\nfaxes_nm is a vector containing labels\nof faxes (following faxes vector rank). If\nNULL, labels follow faxes vector\nnames.\nrange_faxes is a vector to complete if\nthe user wants to set specific limits for functional axes. If\nrange_faxes = c(NA, NA), the range is computed according to\nthe range of values among all axes.\nplot_ch is a logical value used to draw\nor not the 2D convex-hull filled by the global pool of species. Color,\nfill and opacity of the convex hull can be chosen through other inputs,\nplease refer to the function’s help.\nplot_sp_nm is a vector containing\nspecies names to plot. If NULL, no species names plotted.\nName size, color and font can be chosen through other inputs, please\nrefer to the function’s help.\nplot_vertices is a logical value used\nto plot or not vertices with a different shape than other species.\nBe careful these representations are 2D\nrepresentations, thus vertices of the convex-hull in the\nn-multidimensional space can be close to the center of the hull\nprojected in 2D. Color, fill, shape and size of vertices can be chosen\nthrough other inputs, please refer to the function’s help.\ncolor_bg is a R color or an hexadecimal color code\nreferring to the color of the background of the plot.\nother inputs are used to chose color, fill, size, and shape of\nspecies from the global pool, please refer to the function’s\nhelp.\ncheck_input is a recurrent argument in the\nmFD package. It defines whether inputs should be checked\nbefore computation or not. Possible error messages will thus be more\nunderstandable for the user than R error messages\n(Recommendation: set it as TRUE).\n\nHere are the plots for the fruits & baskets dataset for\nthe first four PCoA axis:\n\nCode\n\n\nbig_plot <- mFD::funct.space.plot(\n  sp_faxes_coord  = sp_faxes_coord_fruits[ , c(\"PC1\", \"PC2\", \"PC3\", \"PC4\")],\n  faxes           = c(\"PC1\", \"PC2\", \"PC3\", \"PC4\"),\n  name_file       = NULL,\n  faxes_nm        = NULL,\n  range_faxes     = c(NA, NA),\n  color_bg        = \"grey95\",\n  color_pool      = \"darkgreen\",\n  fill_pool       = \"white\",\n  shape_pool      = 21,\n  size_pool       = 1,\n  plot_ch         = TRUE,\n  color_ch        = \"black\",\n  fill_ch         = \"white\",\n  alpha_ch        = 0.5,\n  plot_vertices   = TRUE,\n  color_vert      = \"blueviolet\",\n  fill_vert       = \"blueviolet\",\n  shape_vert      = 23,\n  size_vert       = 1,\n  plot_sp_nm      = NULL,\n  nm_size         = 3,\n  nm_color        = \"black\",\n  nm_fontface     = \"plain\",\n  check_input     = TRUE)\n\nbig_plot$\"patchwork\"\n\n\n\n\n\nHere, the convex-hull of the species pool is plotted in white and\naxis have the same range to get rid of bias based on different axis\nscales. Species being vertices of the 4D convex hull are in purple.\n\nPart\n2. Computing and plotting FD indices using the mFD\npackage\n\nThe mFD::alpha.fd.multidim() function allows computing\nalpha and beta FD indices.\n\n2.1. Computing and\nplotting alpha FD indices\n\nUsing the alpha.fd.multidim() function, you can compute\nup to nine alpha FD indices:\nFDis Functional Dispersion: the\nbiomass weighted deviation of species traits values from the center of\nthe functional space filled by the assemblage i.e. the\nbiomass-weighted mean distance to the biomass-weighted mean trait values\nof the assemblage.\nFRic Functional Richness: the\nproportion of functional space filled by species of the studied\nassemblage, i.e. the volume inside the convex-hull shaping\nspecies. To compute FRic the number of species must be at\nleast higher than the number of functional axis + 1.\nFDiv Functional Divergence: the\nproportion of the biomass supported by the species with the most extreme\nfunctional traits i.e. the ones located close to the edge of\nthe convex-hull filled by the assemblage.\nFEve Functional Evenness: the\nregularity of biomass distribution in the functional space using the\nMinimum Spanning Tree linking all species present in the\nassemblage.\nFSpe Functional Specialization: the\nbiomass weighted mean distance to the mean position of species from the\nglobal pool (present in all assemblages).\nFMPD Functional Mean Pairwise\nDistance: the mean weighted distance between all species\npairs.\nFNND Functional Mean Nearest Neighbour\nDistance: the weighted distance to the nearest neighbor within\nthe assemblage.\nFIde Functional Identity: the mean\ntraits values for the assemblage. FIde is always computed\nwhen FDis is computed.\nFOri Functional Originality: the\nweighted mean distance to the nearest species from the global species\npool.\nThe function is used as follow:\nCode\n\n\nalpha_fd_indices_fruits <- mFD::alpha.fd.multidim(\n  sp_faxes_coord   = sp_faxes_coord_fruits[ , c(\"PC1\", \"PC2\", \"PC3\", \"PC4\")],\n  asb_sp_w         = baskets_fruits_weights,\n  ind_vect         = c(\"fdis\", \"fmpd\", \"fnnd\", \"feve\", \"fric\", \"fdiv\", \"fori\", \n                       \"fspe\", \"fide\"),\n  scaling          = TRUE,\n  check_input      = TRUE,\n  details_returned = TRUE)\n\n\n\n\nThe arguments and their use are listed below:\nsp_faxes_coord is the species coordinates matrix.\nThis dataframe gathers only axis of the functional space you have chosen\nbased on step 4.\nasb_sp_w is the matrix linking species and\nassemblages they belong to (summarized in step\n1).\nind_vect is a vector with names of diversity\nfunctional indices to compute.\nscaling is a logical value indicating whether\nindices should be scaled between 0 and 1. If scaling is to be done, this\nargument must be set to TRUE.\ncheck_input is a recurrent argument in the\nmFD package. It defines whether inputs should be checked\nbefore computation or not. Possible error messages will thus be more\nunderstandable for the user than R error messages\n(Recommendation: set it as TRUE).\ndetails_returned is used if the user wants to store\ninformation that are used in graphical functions. If the user wants to\nplot FD indices, then details_returned must be set to\nTRUE.\n\nN.B. Use lowercase letters to enter FD\nindices names\n\nThe function has two main outputs:\na data.frame gathering indices values in each\nassemblage (for FIde values, there are as many\ncolumns as there are axes to the studied functional space).\nCode\n\n\nfd_ind_values_fruits <- alpha_fd_indices_fruits$\"functional_diversity_indices\"\nfd_ind_values_fruits\n\n\n          sp_richn      fdis      fmpd      fnnd     feve        fric\nbasket_1         8 0.4763773 0.6255537 0.4050890 0.565326 0.162830681\nbasket_2         8 0.7207823 0.7204459 0.6604092 0.754999 0.162830681\nbasket_3         8 0.7416008 0.7274367 0.6748312 0.805534 0.162830681\nbasket_4         8 0.2958614 0.3426258 0.2258304 0.759802 0.007880372\nbasket_5         8 0.3673992 0.3782650 0.2922436 0.843120 0.007880372\nbasket_6         8 0.8001980 0.7838356 0.7295674 0.814829 0.147936148\nbasket_7         8 0.8121314 0.8092985 0.7566157 0.827061 0.147936148\nbasket_8         8 0.4678159 0.5182996 0.3618776 0.566161 0.036480112\nbasket_9         8 0.5577452 0.5566262 0.4563761 0.675735 0.036480112\nbasket_10        8 0.5505783 0.5501381 0.4118548 0.660085 0.025774304\n               fdiv      fori      fspe    fide_PC1     fide_PC2\nbasket_1  0.5514453 0.2024008 0.4127138 -0.01473662 -0.009461738\nbasket_2  0.8064809 0.2788762 0.5781232  0.01887361 -0.061601373\nbasket_3  0.8089535 0.3067367 0.5888104  0.04724418 -0.056571400\nbasket_4  0.6080409 0.1766279 0.3106937  0.03994897  0.052581211\nbasket_5  0.7288912 0.2165945 0.3488358  0.02349573  0.039069220\nbasket_6  0.8937934 0.6071369 0.7930809  0.24320913 -0.114434642\nbasket_7  0.8989094 0.4841824 0.7443406  0.13341179 -0.183609095\nbasket_8  0.7113688 0.2538185 0.6363814 -0.24497368  0.036194656\nbasket_9  0.7787237 0.3126927 0.6309078 -0.21021559  0.029339706\nbasket_10 0.7741681 0.1799705 0.4587432 -0.05375867 -0.005743348\n             fide_PC3     fide_PC4\nbasket_1  -0.05670043 -0.001823969\nbasket_2  -0.04427402  0.021249327\nbasket_3  -0.03631846  0.018045257\nbasket_4  -0.08413271 -0.001343112\nbasket_5  -0.08187248 -0.010262902\nbasket_6   0.01394977  0.025500282\nbasket_7  -0.01782549  0.021494300\nbasket_8   0.04748935 -0.038827673\nbasket_9   0.05516746 -0.041392184\nbasket_10 -0.05649324  0.041191011\n\n\na details list of data.frames and\nlists gathering information such as coordinates of\ncentroids, distances and identity of the nearest neighbour, distances to\nthe centroid, etc. The user does not have to directly use it but it will\nbe useful if FD indices are then plotted. It can be retrieved\nthrough:\nCode\n\n\ndetails_list_fruits <- alpha_fd_indices_fruits$\"details\"\n\n\n\n\nThen, you can plot functional indices using the\nmFD::alpha.multidim.plot() for up to two assemblages:\n\nCode\n\n\nplots_alpha <- mFD::alpha.multidim.plot(\n  output_alpha_fd_multidim = alpha_fd_indices_fruits,\n  plot_asb_nm              = c(\"basket_1\", \"basket_5\"),\n  ind_nm                   = c(\"fdis\", \"fide\", \"fnnd\", \"feve\", \"fric\", \n                               \"fdiv\", \"fori\", \"fspe\"),\n  faxes                    = NULL,\n  faxes_nm                 = NULL,\n  range_faxes              = c(NA, NA),\n  color_bg                 = \"grey95\",\n  shape_sp                 = c(pool = 3, asb1 = 21, asb2 = 21),\n  size_sp                  = c(pool = 0.7, asb1 = 1, asb2 = 1),\n  color_sp                 = c(pool = \"grey50\", asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\n  color_vert               = c(pool = \"grey50\", asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\n  fill_sp                  = c(pool = NA, asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\n  fill_vert                = c(pool = NA, asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\n  color_ch                 = c(pool = NA, asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\n  fill_ch                  = c(pool = \"white\", asb1 = \"#1F968BFF\", asb2 = \"#DCE319FF\"),\n  alpha_ch                 = c(pool = 1, asb1 = 0.3, asb2 = 0.3),\n  shape_centroid_fdis      = c(asb1 = 22,  asb2 = 24),\n  shape_centroid_fdiv      = c(asb1 = 22,  asb2 = 24),\n  shape_centroid_fspe      = 23,\n  color_centroid_fspe      = \"black\",\n  size_sp_nm               = 3, \n  color_sp_nm              = \"black\",\n  plot_sp_nm               = NULL,\n  fontface_sp_nm           = \"plain\",\n  save_file                = FALSE,\n  check_input              = TRUE) \n\n\n\n\nAs you can see, this function has a lot of arguments: most of them\nare graphical arguments allowing the user to chose colors, shapes,\nsizes, scales, etc. This tutorial only presents main arguments. To learn\nabout the use of graphical arguments, check the function help file. The\nmain arguments of this function are listed below:\noutput_alpha_fd_multidim is the output of the\n`mFD::alpha.fd.multidim() function.\nplot_asb_nm is a vector gathering name(s) of\nassemblage(s) to plot.\nind_vect is a vector gathering FD indices to plot.\nPlots are available for FDis, FIde,\nFEve, FRic, FDiv,\nFOri, FSpe, and FNND.\nfaxes is a vector containing names of axes to plot. You\ncan only plot from two to four axes labels for graphical reasons.\nfaxes_nm is a vector with axes labels if the user ants\ndifferent axes labels than faxes ones.\nrange_faxes is a vector with minimum and maximum values\nfor axes. If range_faxes = c(NA, NA), the range is computed\naccording to the range of values among all axes, all axes having thus\nthe same range. To have a fair representation of species positions in\nall plots, all axes must have the same range.\nplot_sp_nm is a vector containing species names to\nplot. If NULL, then no name is plotted.\nsize, color, fill, and shape arguments for each component of the\ngraphs i.e. species of the global pool, species of the studied\nassemblage(s), vertices, centroids and segments. If you have to plot two\nassemblages, then inputs should be formatted as follow:\nc(pool = ..., asb1 = ..., asb2 = ...) for inputs used for\nglobal pool and studied assemblages and\nc(asb1 = ..., asb2 = ...) for inputs used for studied\nassemblages only.\ncheck_input is a recurrent argument in\nmFD. It defines whether inputs should be checked before\ncomputation or not. Possible error messages will thus be more\nunderstandable for the user than R error messages\n(Recommendation: set it as TRUE.\n\nThen, using these arguments, here are the output plots for the\nfruits & baskets dataset:\n\nFRic representation: the colored shapes reflect the\nconvex-hull of the studied assemblages and the white shape reflects the\nconvex-hull of the global pool of species:\nCode\n\n\nplots_alpha$\"fric\"$\"patchwork\"\n\n\n\n\nFDiv representation: the gravity centers of\nvertices (i.e. species with the most extreme functional\ntraits) of each assemblages are plotted as a square and a triangle. The\ntwo colored circles represent the mean distance of species to the\ngravity center for each assemblage. Species of each assemblage have\ndifferent size given their relative weight into the assemblage.\nCode\n\n\nplots_alpha$\"fdiv\"$\"patchwork\"\n\n\n\n\nFSpe representation: colored traits represent distances\nof each species from a given assemblage to the center of gravity of the\nglobal pool (i.e center of the functional space). the center of gravity\nis plotted with a purple diamond. Species of each assemblage have\ndifferent size given their relative weight into the assemblage.\nCode\n\n\nplots_alpha$\"fspe\"$\"patchwork\"\n\n\n\n\nFDis representation: colored traits represent distances\nof each species from a given assemblage to the center of gravity of\nspecies of the assemblage (defined by FIde values). The center of\ngravity of each assemblage is plotted using a square and a triangle.\nSpecies of each assemblage havedifferent size given their relative\nweight into the assemblage.\nCode\n\n\nplots_alpha$\"fdis\"$\"patchwork\"\n\n\n\n\nFIde representation:colored lines refer to the weighted\naverage position of species of each assemblage along each axis. Species\nof each assemblage have different size given their relative weight into\nthe assemblage.\nCode\n\n\nplots_alpha$\"fide\"$\"patchwork\"\n\n\n\n\nFEve representation: colored traits represent the\nMinimum Spanning Tree linking species of each assemblage. Species of\neach assemblage have different size given their relative weight into the\nassemblage.\nCode\n\n\nplots_alpha$\"feve\"$\"patchwork\"\n\n\n\n\nFOri representation: colored arrows represent the\ndistances of each species from each assemblage to the nearest species in\nthe global species pool. Species of each assemblage have different size\ngiven their relative weight into the assemblage.\nCode\n\n\nplots_alpha$\"fori\"$\"patchwork\"\n\n\n\n\nFNND representation: colored arrows represent the\ndistances of each species from each assemblage to the nearest species in\nthe studied assemblage. Species of each assemblage have different size\ngiven their relative weight into the assemblage.\nCode\n\n\nplots_alpha$\"fnnd\"$\"patchwork\"\n\n\n\n\nN.B. Using the mFD package, you can\nplot more than two assemblages but not with the\nalpha.multidim.plot() function. There are several specific\nfunctions for each step of the plot: build the background of the plot\n(background.plot()), plot the pool of species you are\nworking on (pool.plot()), plot species from the studied\nassemblages (species.plot()) function and lastly plot the\nwanted metric using related function (fric.plot(),\nfdiv.plot(),\nfide.plot(),fdis.plot(),\nfeve.plot(), fnnd.plot(),\nfori.plot(), fspe.plot()). Plots for different\naxes combination can be gathered into a single plot using the\npanels.to.patchwork() function.\n\n2.2. Computing and\nplotting beta FD indices\n\nN.B. Some Mac OS X 10.15 may encounter some issues\nwith the beta_*() functions.\nmFD package allows you to compute beta diversity indices\nfor each assemblage pairs following Villeger\net al. 2013. For that we will use the\nmFD::beta.fd.multidim() function. This function can compute\ntwo families of functional beta diversity indices, either\nJaccard or Sorensen.\nIn this example, we will use Jaccard index. For each assemblages\npair, the dissimilarity index is decomposed into two additive\ncomponents: turnover and\nnestedness-resultant.\nNB The turnover component is the\nhighest if there is no shared traits combination between the two\nassemblages. The nestedness component is the highest if\none assemblage hosts a small subset of the functional strategies present\nin the other.\nThe mFD::beta.fd.multidim() function has the main\nfollowing arguments:\nCode\n\n\nbeta_fd_indices_fruits <- mFD::beta.fd.multidim(\n      sp_faxes_coord   = sp_faxes_coord_fruits[ , c(\"PC1\", \"PC2\", \"PC3\", \"PC4\")],\n      asb_sp_occ       = asb_sp_fruits_occ,\n      check_input      = TRUE,\n      beta_family      = c(\"Jaccard\"),\n      details_returned = TRUE)\n\n\n\nsp_faxes_coord is the species coordinates matrix.\nThis dataframe gathers only axis of the functional\nspace you have chosen based on step 4.\nasb_sp_occ is the matrix of occurrence (coded as\n0/1) of species assemblages (summarized in step\n1).\ncheck_input is a recurrent argument in the\nmFD package. It defines whether inputs should be checked\nbefore computation or not. Possible error messages will thus be more\nunderstandable for the user than R error messages\n(Recommendation: set it as TRUE.\nbeta_family a character string for the type of\nbeta-diversity index to compute, it can either be Jaccard\nor Sorensen.\ndetails_returned is a logical value indicating\nwhether details of outputs must be stored. It should be stored if you\nplan to use the graphical function to illustrate beta diversity indices\nthereafter.\nThere are also other arguments for parallelisation options. Check\nthe function help file for more explanation.\n\nThe function returns a list containing:\na dist object with beta indices values for each pair of\nassemblages:\nCode\n\n\nhead(beta_fd_indices_fruits$\"pairasb_fbd_indices\", 10)\n\n\n$jac_diss\n                         basket_1                basket_2\nbasket_2  0.000000000000003920303                        \nbasket_3  0.000000000000003920303 0.000000000000003920303\nbasket_4  0.965400206424420814777 0.965400206424420814777\nbasket_5  0.965400206424420814777 0.965400206424420814777\nbasket_6  0.870184755044386526457 0.870184755044386526457\nbasket_7  0.870184755044386526457 0.870184755044386526457\nbasket_8  0.979702953159125145000 0.979702953159125145000\nbasket_9  0.979702953159125145000 0.979702953159125145000\nbasket_10 0.915133773514873127830 0.915133773514873127830\n                         basket_3                basket_4\nbasket_2                                                 \nbasket_3                                                 \nbasket_4  0.965400206424420814777                        \nbasket_5  0.965400206424420814777 0.000000000000000000000\nbasket_6  0.870184755044386526457 0.997269536316045868141\nbasket_7  0.870184755044386526457 0.997269536316045868141\nbasket_8  0.979702953159125145000 1.000000000000000000000\nbasket_9  0.979702953159125145000 1.000000000000000000000\nbasket_10 0.915133773514873127830 0.930358372861637583640\n                         basket_5                basket_6\nbasket_2                                                 \nbasket_3                                                 \nbasket_4                                                 \nbasket_5                                                 \nbasket_6  0.997269536316045868141                        \nbasket_7  0.997269536316045868141 0.000000000000000000000\nbasket_8  1.000000000000000000000 1.000000000000000000000\nbasket_9  1.000000000000000000000 1.000000000000000000000\nbasket_10 0.930358372861637583640 0.998350846096365041049\n                         basket_7                basket_8\nbasket_2                                                 \nbasket_3                                                 \nbasket_4                                                 \nbasket_5                                                 \nbasket_6                                                 \nbasket_7                                                 \nbasket_8  1.000000000000000000000                        \nbasket_9  1.000000000000000000000 0.000000000000000000000\nbasket_10 0.998350846096365041049 0.970278802983695509710\n                         basket_9\nbasket_2                         \nbasket_3                         \nbasket_4                         \nbasket_5                         \nbasket_6                         \nbasket_7                         \nbasket_8                         \nbasket_9                         \nbasket_10 0.970278802983695509710\n\n$jac_turn\n                         basket_1                basket_2\nbasket_2  0.000000000000003920303                        \nbasket_3  0.000000000000003920303 0.000000000000003920303\nbasket_4  0.432033262678977625360 0.432033262678977625360\nbasket_5  0.432033262678977625360 0.432033262678977625360\nbasket_6  0.862752798793204322969 0.862752798793204322969\nbasket_7  0.862752798793204322969 0.862752798793204322969\nbasket_8  0.942533114646075143028 0.942533114646075143028\nbasket_9  0.942533114646075143028 0.942533114646075143028\nbasket_10 0.599014624719159005650 0.599014624719159005650\n                         basket_3                basket_4\nbasket_2                                                 \nbasket_3                                                 \nbasket_4  0.432033262678977625360                        \nbasket_5  0.432033262678977625360 0.000000000000000000000\nbasket_6  0.862752798793204322969 0.972334352959841607955\nbasket_7  0.862752798793204322969 0.972334352959841607955\nbasket_8  0.942533114646075143028 1.000000000000000000000\nbasket_9  0.942533114646075143028 1.000000000000000000000\nbasket_10 0.599014624719159005650 0.838523319805481226474\n                         basket_5                basket_6\nbasket_2                                                 \nbasket_3                                                 \nbasket_4                                                 \nbasket_5                                                 \nbasket_6  0.972334352959841607955                        \nbasket_7  0.972334352959841607955 0.000000000000000000000\nbasket_8  1.000000000000000000000 1.000000000000000000000\nbasket_9  1.000000000000000000000 1.000000000000000000000\nbasket_10 0.838523319805481226474 0.994420813909867584712\n                         basket_7                basket_8\nbasket_2                                                 \nbasket_3                                                 \nbasket_4                                                 \nbasket_5                                                 \nbasket_6                                                 \nbasket_7                                                 \nbasket_8  1.000000000000000000000                        \nbasket_9  1.000000000000000000000 0.000000000000000000000\nbasket_10 0.994420813909867584712 0.963883258730821701477\n                         basket_9\nbasket_2                         \nbasket_3                         \nbasket_4                         \nbasket_5                         \nbasket_6                         \nbasket_7                         \nbasket_8                         \nbasket_9                         \nbasket_10 0.963883258730821701477\n\n$jac_nest\n             basket_1    basket_2    basket_3    basket_4    basket_5\nbasket_2  0.000000000                                                \nbasket_3  0.000000000 0.000000000                                    \nbasket_4  0.533366944 0.533366944 0.533366944                        \nbasket_5  0.533366944 0.533366944 0.533366944 0.000000000            \nbasket_6  0.007431956 0.007431956 0.007431956 0.024935183 0.024935183\nbasket_7  0.007431956 0.007431956 0.007431956 0.024935183 0.024935183\nbasket_8  0.037169839 0.037169839 0.037169839 0.000000000 0.000000000\nbasket_9  0.037169839 0.037169839 0.037169839 0.000000000 0.000000000\nbasket_10 0.316119149 0.316119149 0.316119149 0.091835053 0.091835053\n             basket_6    basket_7    basket_8    basket_9\nbasket_2                                                 \nbasket_3                                                 \nbasket_4                                                 \nbasket_5                                                 \nbasket_6                                                 \nbasket_7  0.000000000                                    \nbasket_8  0.000000000 0.000000000                        \nbasket_9  0.000000000 0.000000000 0.000000000            \nbasket_10 0.003930032 0.003930032 0.006395544 0.006395544\n\na list containing details such as inputs, vertices of the global\npool and of each assemblage and FRic values for each assemblage\nCode\n\n\nbeta_fd_indices_fruits$\"details\"\n\n\n$inputs\n$inputs$sp_faxes_coord\n                        PC1           PC2          PC3          PC4\napple          0.0055715265  0.0350421604 -0.097471237  0.022402932\napricot        0.0051324906  0.1993950375 -0.095659935  0.041498534\nbanana         0.4180172546 -0.1414728845  0.008086992  0.006165812\ncurrant       -0.3278449659  0.0536374098  0.049052945 -0.076408888\nblackberry    -0.3034346496  0.0526909897  0.049135314 -0.142658171\nblueberry     -0.2815708070 -0.0866665191  0.051316336  0.112502412\ncherry        -0.0180809780  0.2978695529 -0.029313202  0.111166444\ngrape         -0.2228504050  0.0885963887  0.225751135  0.190718259\ngrapefruit     0.1450603259 -0.0673074635 -0.119455606 -0.084037260\nkiwifruit     -0.1550698937 -0.0814958746  0.005740138  0.086787104\nlemon          0.1067949113  0.0007714157 -0.088895714 -0.207026513\nlime           0.2079695595  0.0199956576  0.099157708 -0.266782185\nlitchi         0.2917434196  0.2537533311  0.202206065  0.041136776\nmango          0.4393412201  0.0559467870 -0.054626734  0.119804224\nmelon         -0.1493941692 -0.2420723462 -0.151024241  0.070247222\norange         0.1236282949 -0.0086604744 -0.050235439 -0.046156784\npassion_fruit  0.1101264243 -0.1062790540  0.342728218  0.031929461\npeach          0.0351203321  0.1465415655 -0.199699124  0.049647666\npear          -0.0005886084  0.0297927029 -0.105703762  0.010290065\npineapple      0.1991811945 -0.4756825960  0.075904777  0.042696533\nplum           0.0126064681  0.1989177835 -0.084010036  0.058965350\nraspberry     -0.3070933066  0.0543878274  0.049178225 -0.156730076\nstrawberry    -0.2917242495 -0.0898440618  0.025237344 -0.047647147\ntangerine      0.1039035285  0.0526165085  0.041894666 -0.048619225\nwater_melon   -0.1465449176 -0.2404738440 -0.149294834  0.080107453\n\n$inputs$asb_sp_occ\n          apple apricot banana currant blackberry blueberry cherry\nbasket_1      1       0      1       0          0         0      1\nbasket_2      1       0      1       0          0         0      1\nbasket_3      1       0      1       0          0         0      1\nbasket_4      1       0      0       0          0         0      0\nbasket_5      1       0      0       0          0         0      0\nbasket_6      1       0      1       0          0         0      0\nbasket_7      1       0      1       0          0         0      0\nbasket_8      0       0      0       1          1         1      1\nbasket_9      0       0      0       1          1         1      1\nbasket_10     1       1      0       0          0         0      0\n          grape grapefruit kiwifruit lemon lime litchi mango melon\nbasket_1      0          0         0     1    0      0     0     1\nbasket_2      0          0         0     1    0      0     0     1\nbasket_3      0          0         0     1    0      0     0     1\nbasket_4      0          0         1     1    0      0     0     0\nbasket_5      0          0         1     1    0      0     0     0\nbasket_6      0          0         0     0    1      1     1     0\nbasket_7      0          0         0     0    1      1     1     0\nbasket_8      1          0         0     1    0      0     0     0\nbasket_9      1          0         0     1    0      0     0     0\nbasket_10     1          1         0     0    0      0     0     1\n          orange passion_fruit peach pear pineapple plum raspberry\nbasket_1       0             1     0    1         0    0         0\nbasket_2       0             1     0    1         0    0         0\nbasket_3       0             1     0    1         0    0         0\nbasket_4       1             0     1    1         0    1         0\nbasket_5       1             0     1    1         0    1         0\nbasket_6       1             0     0    0         1    0         0\nbasket_7       1             0     0    0         1    0         0\nbasket_8       0             0     0    0         0    0         1\nbasket_9       0             0     0    0         0    0         1\nbasket_10      0             0     0    1         0    1         0\n          strawberry tangerine water_melon\nbasket_1           1         0           0\nbasket_2           1         0           0\nbasket_3           1         0           0\nbasket_4           0         1           0\nbasket_5           0         1           0\nbasket_6           0         0           1\nbasket_7           0         0           1\nbasket_8           1         0           0\nbasket_9           1         0           0\nbasket_10          1         0           0\n\n\n$pool_vertices\n [1] \"grape\"         \"lemon\"         \"water_melon\"   \"banana\"       \n [5] \"raspberry\"     \"cherry\"        \"blueberry\"     \"grapefruit\"   \n [9] \"melon\"         \"strawberry\"    \"peach\"         \"apricot\"      \n[13] \"passion_fruit\" \"litchi\"        \"lime\"          \"pineapple\"    \n[17] \"mango\"         \"currant\"      \n\n$asb_FRic\n   basket_1    basket_2    basket_3    basket_4    basket_5 \n0.162830681 0.162830681 0.162830681 0.007880372 0.007880372 \n   basket_6    basket_7    basket_8    basket_9   basket_10 \n0.147936148 0.147936148 0.036480112 0.036480112 0.025774304 \n\n$asb_vertices\n$asb_vertices$basket_1\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \n\n$asb_vertices$basket_2\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \n\n$asb_vertices$basket_3\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \n\n$asb_vertices$basket_4\n[1] \"peach\"     \"lemon\"     \"tangerine\" \"pear\"      \"plum\"     \n[6] \"orange\"    \"kiwifruit\"\n\n$asb_vertices$basket_5\n[1] \"peach\"     \"lemon\"     \"tangerine\" \"pear\"      \"plum\"     \n[6] \"orange\"    \"kiwifruit\"\n\n$asb_vertices$basket_6\n[1] \"litchi\"      \"lime\"        \"apple\"       \"banana\"     \n[5] \"orange\"      \"pineapple\"   \"mango\"       \"water_melon\"\n\n$asb_vertices$basket_7\n[1] \"litchi\"      \"lime\"        \"apple\"       \"banana\"     \n[5] \"orange\"      \"pineapple\"   \"mango\"       \"water_melon\"\n\n$asb_vertices$basket_8\n[1] \"strawberry\" \"blueberry\"  \"raspberry\"  \"cherry\"     \"grape\"     \n[6] \"lemon\"      \"currant\"   \n\n$asb_vertices$basket_9\n[1] \"strawberry\" \"blueberry\"  \"raspberry\"  \"cherry\"     \"grape\"     \n[6] \"lemon\"      \"currant\"   \n\n$asb_vertices$basket_10\n[1] \"grape\"      \"melon\"      \"plum\"       \"apricot\"    \"grapefruit\"\n[6] \"strawberry\"\n\na vector containing the FRic value for each assemblage\nretrieved through the details_beta list:\nCode\n\n\nbeta_fd_indices_fruits$\"details\"$\"asb_FRic\"\n\n\n   basket_1    basket_2    basket_3    basket_4    basket_5 \n0.162830681 0.162830681 0.162830681 0.007880372 0.007880372 \n   basket_6    basket_7    basket_8    basket_9   basket_10 \n0.147936148 0.147936148 0.036480112 0.036480112 0.025774304 \n\n\na list of vectors containing names of species being vertices of the\nconvex hull for each assemblage retrieved through the\ndetails_beta list:\n\n\nbeta_fd_indices_fruits$\"details\"$\"asb_vertices\"\n\n\n$basket_1\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \n\n$basket_2\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \n\n$basket_3\n[1] \"lemon\"         \"melon\"         \"pear\"          \"apple\"        \n[5] \"passion_fruit\" \"cherry\"        \"strawberry\"    \"banana\"       \n\n$basket_4\n[1] \"peach\"     \"lemon\"     \"tangerine\" \"pear\"      \"plum\"     \n[6] \"orange\"    \"kiwifruit\"\n\n$basket_5\n[1] \"peach\"     \"lemon\"     \"tangerine\" \"pear\"      \"plum\"     \n[6] \"orange\"    \"kiwifruit\"\n\n$basket_6\n[1] \"litchi\"      \"lime\"        \"apple\"       \"banana\"     \n[5] \"orange\"      \"pineapple\"   \"mango\"       \"water_melon\"\n\n$basket_7\n[1] \"litchi\"      \"lime\"        \"apple\"       \"banana\"     \n[5] \"orange\"      \"pineapple\"   \"mango\"       \"water_melon\"\n\n$basket_8\n[1] \"strawberry\" \"blueberry\"  \"raspberry\"  \"cherry\"     \"grape\"     \n[6] \"lemon\"      \"currant\"   \n\n$basket_9\n[1] \"strawberry\" \"blueberry\"  \"raspberry\"  \"cherry\"     \"grape\"     \n[6] \"lemon\"      \"currant\"   \n\n$basket_10\n[1] \"grape\"      \"melon\"      \"plum\"       \"apricot\"    \"grapefruit\"\n[6] \"strawberry\"\n\nThen, the package allows the user to illustrate functional\nbeta-diversity indices for a pair of assemblages in a multidimensional\nspace using the mFD::beta.multidim.plot() function. The\noutput of this function is a figure showing the overlap between convex\nhulls shaping each of the two species assemblages.\nThe plotting function has a large number of arguments, allowing the\nuser to chose graphical options. Arguments are listed below:\nCode\n\n\nbeta_plot_fruits <- mFD::beta.multidim.plot(\n  output_beta_fd_multidim = beta_fd_indices_fruits,\n  plot_asb_nm             = c(\"basket_1\", \"basket_4\"),\n  beta_family             = c(\"Jaccard\"),\n  plot_sp_nm              = c(\"apple\", \"lemon\", \"pear\"),\n  faxes                   = paste0(\"PC\", 1:4),\n  name_file               = NULL,\n  faxes_nm                = NULL,\n  range_faxes             = c(NA, NA),\n  color_bg                = \"grey95\",\n  shape_sp                = c(\"pool\" = 3.0, asb1 = 22, asb2 = 21),\n  size_sp                 = c(\"pool\" = 0.8, asb1 =  1, asb2 =  1),\n  color_sp                = c(\"pool\" = \"grey50\", asb1 = \"blue\", asb2 = \"red\"),\n  fill_sp                 = c(\"pool\" = NA, asb1 = \"white\", asb2 = \"white\"),\n  fill_vert               = c(\"pool\" = NA, asb1 = \"blue\", asb2 = \"red\"),\n  color_ch                = c(\"pool\" = NA, asb1 = \"blue\", asb2 = \"red\"),\n  fill_ch                 = c(\"pool\" = \"white\", asb1 = \"blue\", asb2 = \"red\"),\n  alpha_ch                = c(\"pool\" = 1, asb1 = 0.3, asb2 = 0.3),\n  nm_size                 = 3,\n  nm_color                = \"black\",\n  nm_fontface             = \"plain\",\n  check_input             = TRUE)\n\n\n\noutput_beta_fd_multidim is the output of the\nmFD::beta.fd.multidim() function retrieved before as\nbeta_fd_indices.\nplot_asb_nm is a vector containing the name of the\ntwo assemblages to plot. Here plots of indices will be shown for\nbasket_1 and basket_4.\nbeta_family refers to the family of the plotted\nindex. It must be the same as the family chosen to compute beta\nfunctional indices values with the mFD::beta.fd.multidim()\nfunction.\nplot_sp_nm is a vector containing the names of\nspecies the user want to plot, if any. If no the user does not want to\nplot any species name, then this argument must be set up to\nNULL. Here, apple, cherry and\nlemon will be plotted on the graph.\nfaxes is a vector containing the names of the\nfunctional axes of the plotted functional space. Here, the figure will\nbe plotted for PC1, PC2 and PC3. This\nfunction allows you to plot between two and four axes for graphical\nreasons.\nname_file is a character string with the name of the\nfile to save the figure (without extension). If the user does not want\nto save the file and only display it, this argument must be set up to\nNULL.\nfaxes_nm is a vector containing the axes labels for\nthe figure if the user wants to set up different labels than those\ncontained in faxes.\nrange_faxes is a vector with minimum and maximum\nvalues of functional axes. To have a fair representation of the position\nof species in all plots, axes should have the same range. If the user\nwants the range to be computed according to the range of values among\nall axes, this argument must be set up to\nc(NA, NA).\ncheck_input is a recurrent argument in the\nmFD package. It defines whether inputs should be checked\nbefore computation or not. Possible error messages will thus be more\nunderstandable for the user than R error messages\n(Recommendation: set it as TRUE)\nOthers arguments to set up colors, shapes, sizes and, text fonts\nare also available. For more information about them, read the function\nhelp file.\nThen, the function returns each graph for each functional axes\ncombination and also a multipanel plot with all combinations of axes and\nthe graph caption. Here is the multipanel for the fruits exaample:\n\n\nbeta_plot_fruits$\"patchwork\"\n\n\n\n\nFor each assemblage, the associated convex hull is plotted in a\ndifferent colour and indices values are printed on the right corner of\nthe plot. Vertices of the convex hull of a given assemblage can be\nplotted with a different symbol such as in this example. Species of all\nassemblages are plotted with gray cross and the associated convex hull\nis plotted in white.\n\nPart 3. Functional rarity\n\n\n\n\n",
      "last_modified": "2022-05-31T16:43:13+02:00"
    },
    {
      "path": "resources.html",
      "title": "Resources",
      "author": [],
      "contents": "\n\nRecommended papers\nGrenié M, Denelle P, Tucker CM, Munoz F & Violle C (2017)\nfunrar: An R package to characterize functional rarity.\nDiversity and Distributions, 23, 1365-1371.\nDOI: 10.1111/ddi.12629  \nMagneville C, Loiseau N, Albouy C, Casajus N, Claverie T, Escalas\nA, Leprieur F, Maire E, Mouillot D & Villéger S (2022) mFD: an R\npackage to compute and illustrate the multiple facets of functional\ndiversity. Ecography. DOI: 10.1111/ecog.05904  \nMaire E, Grenouillet G, Brosse S & Villéger S (2015)\nAssessing functional space quality. Global Ecology and\nBiogeography, 24, 728-740. DOI: 10.1111/geb.12299  \nMouillot D, Graham NAJ, Villéger S, Mason NWH & Bellwood DR\n(2013) A functional approach reveals community responses to\ndisturbances. Trends in Ecology &\nEvolution, 28, 167-177. DOI: 10.1016/j.tree.2012.10.004\n \nVilléger S, Mason NWH & Mouillot D (2008) New\nmultidimensional functional diversity indices for a multifaceted\nframework in functional ecology. Ecology, 89,\n2290-2301. DOI: 10.1890/07-1206.1  \nCorrections\nIf you see mistakes or want to suggest changes, please Create an\nissue on the source repository.\nReuse\nThe material of this website is licensed under Creative Commons\nAttribution CC BY\n4.0. Source code is available at https://github.com/frbcesab/workshop-free/.\nCitation\nCasajus N, Grénié M, Magneville C & Villéger S (2022) Workshop\nFRB-CESAB & FREE Working Group: Functional Rarity and Diversity in\nEcology.\n\n\n\n",
      "last_modified": "2022-05-31T16:43:14+02:00"
    }
  ],
  "collections": []
}
